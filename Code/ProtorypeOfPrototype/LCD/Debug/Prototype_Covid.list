
Prototype_Covid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004164  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004278  08004278  00014278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043bc  080043bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043bc  080043bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004434  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008efb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e1  00000000  00000000  00028f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0002a678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002af50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013f1a  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007221  00000000  00000000  0003f69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d4f5  00000000  00000000  000468bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b94  00000000  00000000  000b3e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800425c 	.word	0x0800425c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800425c 	.word	0x0800425c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f023 030f 	bic.w	r3, r3, #15
 8000a5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	011b      	lsls	r3, r3, #4
 8000a62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	f043 030c 	orr.w	r3, r3, #12
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	f043 030c 	orr.w	r3, r3, #12
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a8c:	f107 0208 	add.w	r2, r7, #8
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2304      	movs	r3, #4
 8000a96:	214e      	movs	r1, #78	; 0x4e
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <lcd_send_cmd+0x5c>)
 8000a9a:	f001 f837 	bl	8001b0c <HAL_I2C_Master_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000098 	.word	0x20000098

08000aac <lcd_send_data>:

void lcd_send_data (char data)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f023 030f 	bic.w	r3, r3, #15
 8000abc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f043 030d 	orr.w	r3, r3, #13
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f043 0309 	orr.w	r3, r3, #9
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	f043 030d 	orr.w	r3, r3, #13
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	f043 0309 	orr.w	r3, r3, #9
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2304      	movs	r3, #4
 8000af6:	214e      	movs	r1, #78	; 0x4e
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <lcd_send_data+0x5c>)
 8000afa:	f001 f807 	bl	8001b0c <HAL_I2C_Master_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000098 	.word	0x20000098

08000b0c <lcd_clear>:

void lcd_clear (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000b12:	2080      	movs	r0, #128	; 0x80
 8000b14:	f7ff ff9a 	bl	8000a4c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e005      	b.n	8000b2a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000b1e:	2020      	movs	r0, #32
 8000b20:	f7ff ffc4 	bl	8000aac <lcd_send_data>
	for (int i=0; i<70; i++)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3301      	adds	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b45      	cmp	r3, #69	; 0x45
 8000b2e:	ddf6      	ble.n	8000b1e <lcd_clear+0x12>
	}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <lcd_put_cur+0x16>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d005      	beq.n	8000b58 <lcd_put_cur+0x20>
 8000b4c:	e009      	b.n	8000b62 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	603b      	str	r3, [r7, #0]
            break;
 8000b56:	e004      	b.n	8000b62 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b5e:	603b      	str	r3, [r7, #0]
            break;
 8000b60:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff70 	bl	8000a4c <lcd_send_cmd>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <lcd_init>:


void lcd_init (void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f000 fc27 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b7e:	2030      	movs	r0, #48	; 0x30
 8000b80:	f7ff ff64 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b84:	2005      	movs	r0, #5
 8000b86:	f000 fc21 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b8a:	2030      	movs	r0, #48	; 0x30
 8000b8c:	f7ff ff5e 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fc1b 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b96:	2030      	movs	r0, #48	; 0x30
 8000b98:	f7ff ff58 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(10);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f000 fc15 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f7ff ff52 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(10);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f000 fc0f 	bl	80013cc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff ff4c 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 fc09 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bba:	2008      	movs	r0, #8
 8000bbc:	f7ff ff46 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fc03 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff ff40 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 fbfd 	bl	80013cc <HAL_Delay>
	HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f000 fbfa 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bd8:	2006      	movs	r0, #6
 8000bda:	f7ff ff37 	bl	8000a4c <lcd_send_cmd>
	HAL_Delay(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fbf4 	bl	80013cc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000be4:	200c      	movs	r0, #12
 8000be6:	f7ff ff31 	bl	8000a4c <lcd_send_cmd>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000bf6:	e006      	b.n	8000c06 <lcd_send_string+0x18>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff53 	bl	8000aac <lcd_send_data>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f4      	bne.n	8000bf8 <lcd_send_string+0xa>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000c1e:	f000 fb73 	bl	8001308 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f843 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 f937 	bl	8000e98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c2a:	f000 f885 	bl	8000d38 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c2e:	f000 f8df 	bl	8000df0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c32:	f000 f907 	bl	8000e44 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000c36:	f000 f8ad 	bl	8000d94 <MX_I2C2_Init>


  /* USER CODE BEGIN 2 */

char res[20];	//buff for float_to_str
float n = 36.1;	//prototype of temp measure
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <main+0x88>)
 8000c3c:	617b      	str	r3, [r7, #20]

  while (1)
  {

	//================================ Lcd print
	  lcd_init ();
 8000c3e:	f7ff ff99 	bl	8000b74 <lcd_init>
	  HAL_Delay(500);
 8000c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c46:	f000 fbc1 	bl	80013cc <HAL_Delay>

	  lcd_send_string("Temp:");
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <main+0x8c>)
 8000c4c:	f7ff ffcf 	bl	8000bee <lcd_send_string>
	  lcd_put_cur(0,6);
 8000c50:	2106      	movs	r1, #6
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff ff70 	bl	8000b38 <lcd_put_cur>


	  gcvt(n, 6, res);		 	// float to str
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f7ff fbdd 	bl	8000418 <__aeabi_f2d>
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2206      	movs	r2, #6
 8000c62:	f001 ff91 	bl	8002b88 <gcvt>
	  lcd_send_string (res);	//print temp
 8000c66:	463b      	mov	r3, r7
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ffc0 	bl	8000bee <lcd_send_string>

	  lcd_put_cur(0,10);
 8000c6e:	210a      	movs	r1, #10
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ff61 	bl	8000b38 <lcd_put_cur>
	  lcd_send_data (223);	//print °
 8000c76:	20df      	movs	r0, #223	; 0xdf
 8000c78:	f7ff ff18 	bl	8000aac <lcd_send_data>

	  lcd_put_cur(0,11);
 8000c7c:	210b      	movs	r1, #11
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff5a 	bl	8000b38 <lcd_put_cur>
	  lcd_send_string ("C");
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <main+0x90>)
 8000c86:	f7ff ffb2 	bl	8000bee <lcd_send_string>

	  HAL_Delay(5000);
 8000c8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c8e:	f000 fb9d 	bl	80013cc <HAL_Delay>
	  lcd_clear();
 8000c92:	f7ff ff3b 	bl	8000b0c <lcd_clear>
	  HAL_Delay(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9a:	f000 fb97 	bl	80013cc <HAL_Delay>
  {
 8000c9e:	e7ce      	b.n	8000c3e <main+0x26>
 8000ca0:	42106666 	.word	0x42106666
 8000ca4:	08004278 	.word	0x08004278
 8000ca8:	08004280 	.word	0x08004280

08000cac <SystemClock_Config>:



//============================================== System config
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 ffb2 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fa03 	bl	8002100 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d00:	f000 f920 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fc6e 	bl	8002600 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2a:	f000 f90b 	bl	8000f44 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3740      	adds	r7, #64	; 0x40
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_I2C1_Init+0x54>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_I2C1_Init+0x58>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_I2C1_Init+0x50>)
 8000d76:	f000 fda1 	bl	80018bc <HAL_I2C_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d80:	f000 f8e0 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	000186a0 	.word	0x000186a0

08000d94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C2_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C2_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C2_Init+0x50>)
 8000dd2:	f000 fd73 	bl	80018bc <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f8b2 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000ec 	.word	0x200000ec
 8000de8:	40005800 	.word	0x40005800
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f001 fd86 	bl	8002938 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f000 f887 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000140 	.word	0x20000140
 8000e40:	40013800 	.word	0x40013800

08000e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART2_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f001 fd5c 	bl	8002938 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f000 f85d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000180 	.word	0x20000180
 8000e94:	40004400 	.word	0x40004400

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000eb2:	f043 0320 	orr.w	r3, r3, #32
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_GPIO_Init+0xa4>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <MX_GPIO_Init+0xa8>)
 8000efa:	f000 fcc7 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <MX_GPIO_Init+0xa8>)
 8000f16:	f000 fb5f 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0xa8>)
 8000f2e:	f000 fb53 	bl	80015d8 <HAL_GPIO_Init>

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_MspInit+0x5c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x5c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a2b      	ldr	r2, [pc, #172]	; (800107c <HAL_I2C_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d124      	bne.n	800101e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fec:	23c0      	movs	r3, #192	; 0xc0
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <HAL_I2C_MspInit+0xd0>)
 8001000:	f000 faea 	bl	80015d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800101c:	e029      	b.n	8001072 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_I2C_MspInit+0xd4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d124      	bne.n	8001072 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4619      	mov	r1, r3
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <HAL_I2C_MspInit+0xd0>)
 8001056:	f000 fabf 	bl	80015d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_I2C_MspInit+0xcc>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40005800 	.word	0x40005800

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_UART_MspInit+0xf8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d132      	bne.n	8001112 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a35      	ldr	r2, [pc, #212]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_UART_MspInit+0xfc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4826      	ldr	r0, [pc, #152]	; (800118c <HAL_UART_MspInit+0x100>)
 80010f2:	f000 fa71 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4619      	mov	r1, r3
 800110a:	4820      	ldr	r0, [pc, #128]	; (800118c <HAL_UART_MspInit+0x100>)
 800110c:	f000 fa64 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001110:	e034      	b.n	800117c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_UART_MspInit+0x104>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d12f      	bne.n	800117c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_UART_MspInit+0xfc>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001126:	61d3      	str	r3, [r2, #28]
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0xfc>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_UART_MspInit+0xfc>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0xfc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114c:	2304      	movs	r3, #4
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4619      	mov	r1, r3
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_UART_MspInit+0x100>)
 8001160:	f000 fa3a 	bl	80015d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001164:	2308      	movs	r3, #8
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_UART_MspInit+0x100>)
 8001178:	f000 fa2e 	bl	80015d8 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40013800 	.word	0x40013800
 8001188:	40021000 	.word	0x40021000
 800118c:	40010800 	.word	0x40010800
 8001190:	40004400 	.word	0x40004400

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <HardFault_Handler+0x4>

080011a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <BusFault_Handler+0x4>

080011b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f8d8 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f001 fcda 	bl	8002bd0 <__errno>
 800121c:	4602      	mov	r2, r0
 800121e:	230c      	movs	r3, #12
 8001220:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20005000 	.word	0x20005000
 8001248:	00000400 	.word	0x00000400
 800124c:	2000008c 	.word	0x2000008c
 8001250:	200001c8 	.word	0x200001c8

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <SystemInit+0x5c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <SystemInit+0x5c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <SystemInit+0x5c>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4911      	ldr	r1, [pc, #68]	; (80012b0 <SystemInit+0x5c>)
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <SystemInit+0x60>)
 800126c:	4013      	ands	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <SystemInit+0x5c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <SystemInit+0x5c>)
 8001276:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <SystemInit+0x5c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SystemInit+0x5c>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <SystemInit+0x5c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <SystemInit+0x5c>)
 8001292:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001296:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SystemInit+0x5c>)
 800129a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800129e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SystemInit+0x64>)
 80012a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	f8ff0000 	.word	0xf8ff0000
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012be:	e003      	b.n	80012c8 <LoopCopyDataInit>

080012c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012c6:	3104      	adds	r1, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012d0:	d3f6      	bcc.n	80012c0 <CopyDataInit>
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012d4:	e002      	b.n	80012dc <LoopFillZerobss>

080012d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012d8:	f842 3b04 	str.w	r3, [r2], #4

080012dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012e0:	d3f9      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e2:	f7ff ffb7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 fc79 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff fc95 	bl	8000c18 <main>
  bx lr
 80012ee:	4770      	bx	lr
  ldr r3, =_sidata
 80012f0:	080043c4 	.word	0x080043c4
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012f8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80012fc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001300:	200001c8 	.word	0x200001c8

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x28>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f929 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fe14 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f933 	bl	80015be <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001370:	f000 f909 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200001c0 	.word	0x200001c0

080013b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200001c0 	.word	0x200001c0

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_Delay+0x40>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000008 	.word	0x20000008

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001550:	f7ff ff90 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff49 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff5e 	bl	8001458 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff90 	bl	80014c8 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5f 	bl	8001474 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb0 	bl	800152c <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e127      	b.n	800183c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ec:	2201      	movs	r2, #1
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 8116 	bne.w	8001836 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b12      	cmp	r3, #18
 8001610:	d034      	beq.n	800167c <HAL_GPIO_Init+0xa4>
 8001612:	2b12      	cmp	r3, #18
 8001614:	d80d      	bhi.n	8001632 <HAL_GPIO_Init+0x5a>
 8001616:	2b02      	cmp	r3, #2
 8001618:	d02b      	beq.n	8001672 <HAL_GPIO_Init+0x9a>
 800161a:	2b02      	cmp	r3, #2
 800161c:	d804      	bhi.n	8001628 <HAL_GPIO_Init+0x50>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d031      	beq.n	8001686 <HAL_GPIO_Init+0xae>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d01c      	beq.n	8001660 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001626:	e048      	b.n	80016ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001628:	2b03      	cmp	r3, #3
 800162a:	d043      	beq.n	80016b4 <HAL_GPIO_Init+0xdc>
 800162c:	2b11      	cmp	r3, #17
 800162e:	d01b      	beq.n	8001668 <HAL_GPIO_Init+0x90>
          break;
 8001630:	e043      	b.n	80016ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001632:	4a89      	ldr	r2, [pc, #548]	; (8001858 <HAL_GPIO_Init+0x280>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d026      	beq.n	8001686 <HAL_GPIO_Init+0xae>
 8001638:	4a87      	ldr	r2, [pc, #540]	; (8001858 <HAL_GPIO_Init+0x280>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d806      	bhi.n	800164c <HAL_GPIO_Init+0x74>
 800163e:	4a87      	ldr	r2, [pc, #540]	; (800185c <HAL_GPIO_Init+0x284>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d020      	beq.n	8001686 <HAL_GPIO_Init+0xae>
 8001644:	4a86      	ldr	r2, [pc, #536]	; (8001860 <HAL_GPIO_Init+0x288>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01d      	beq.n	8001686 <HAL_GPIO_Init+0xae>
          break;
 800164a:	e036      	b.n	80016ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800164c:	4a85      	ldr	r2, [pc, #532]	; (8001864 <HAL_GPIO_Init+0x28c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <HAL_GPIO_Init+0xae>
 8001652:	4a85      	ldr	r2, [pc, #532]	; (8001868 <HAL_GPIO_Init+0x290>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d016      	beq.n	8001686 <HAL_GPIO_Init+0xae>
 8001658:	4a84      	ldr	r2, [pc, #528]	; (800186c <HAL_GPIO_Init+0x294>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0xae>
          break;
 800165e:	e02c      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e028      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	3304      	adds	r3, #4
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e023      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	3308      	adds	r3, #8
 8001678:	623b      	str	r3, [r7, #32]
          break;
 800167a:	e01e      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	330c      	adds	r3, #12
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e019      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800168e:	2304      	movs	r3, #4
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e012      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169c:	2308      	movs	r3, #8
 800169e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	611a      	str	r2, [r3, #16]
          break;
 80016a6:	e008      	b.n	80016ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	615a      	str	r2, [r3, #20]
          break;
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d801      	bhi.n	80016c4 <HAL_GPIO_Init+0xec>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	e001      	b.n	80016c8 <HAL_GPIO_Init+0xf0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d802      	bhi.n	80016d6 <HAL_GPIO_Init+0xfe>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x104>
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3b08      	subs	r3, #8
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	210f      	movs	r1, #15
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	401a      	ands	r2, r3
 80016ee:	6a39      	ldr	r1, [r7, #32]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8096 	beq.w	8001836 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_GPIO_Init+0x298>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_GPIO_Init+0x298>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_GPIO_Init+0x298>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001722:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x29c>)
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_GPIO_Init+0x2a0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x19e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_GPIO_Init+0x2a4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x19a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_GPIO_Init+0x2a8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x196>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2ac>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x192>
 8001766:	2303      	movs	r3, #3
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x1a0>
 800176a:	2304      	movs	r3, #4
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x1a0>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x1a0>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x1a0>
 8001776:	2300      	movs	r3, #0
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001788:	493a      	ldr	r1, [pc, #232]	; (8001874 <HAL_GPIO_Init+0x29c>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4938      	ldr	r1, [pc, #224]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4933      	ldr	r1, [pc, #204]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	492e      	ldr	r1, [pc, #184]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4929      	ldr	r1, [pc, #164]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	4924      	ldr	r1, [pc, #144]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	43db      	mvns	r3, r3
 8001808:	491f      	ldr	r1, [pc, #124]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 800180a:	4013      	ands	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	491a      	ldr	r1, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	4915      	ldr	r1, [pc, #84]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001832:	4013      	ands	r3, r2
 8001834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f aed0 	bne.w	80015ec <HAL_GPIO_Init+0x14>
  }
}
 800184c:	bf00      	nop
 800184e:	372c      	adds	r7, #44	; 0x2c
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	10210000 	.word	0x10210000
 800185c:	10110000 	.word	0x10110000
 8001860:	10120000 	.word	0x10120000
 8001864:	10310000 	.word	0x10310000
 8001868:	10320000 	.word	0x10320000
 800186c:	10220000 	.word	0x10220000
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00
 8001880:	40011000 	.word	0x40011000
 8001884:	40011400 	.word	0x40011400
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e10f      	b.n	8001aee <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fb66 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001900:	f000 ffd4 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a7b      	ldr	r2, [pc, #492]	; (8001af8 <HAL_I2C_Init+0x23c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d807      	bhi.n	8001920 <HAL_I2C_Init+0x64>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a7a      	ldr	r2, [pc, #488]	; (8001afc <HAL_I2C_Init+0x240>)
 8001914:	4293      	cmp	r3, r2
 8001916:	bf94      	ite	ls
 8001918:	2301      	movls	r3, #1
 800191a:	2300      	movhi	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e006      	b.n	800192e <HAL_I2C_Init+0x72>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a77      	ldr	r2, [pc, #476]	; (8001b00 <HAL_I2C_Init+0x244>)
 8001924:	4293      	cmp	r3, r2
 8001926:	bf94      	ite	ls
 8001928:	2301      	movls	r3, #1
 800192a:	2300      	movhi	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0db      	b.n	8001aee <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_I2C_Init+0x248>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a64      	ldr	r2, [pc, #400]	; (8001af8 <HAL_I2C_Init+0x23c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d802      	bhi.n	8001970 <HAL_I2C_Init+0xb4>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	e009      	b.n	8001984 <HAL_I2C_Init+0xc8>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_I2C_Init+0x24c>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	3301      	adds	r3, #1
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4956      	ldr	r1, [pc, #344]	; (8001af8 <HAL_I2C_Init+0x23c>)
 80019a0:	428b      	cmp	r3, r1
 80019a2:	d80d      	bhi.n	80019c0 <HAL_I2C_Init+0x104>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e59      	subs	r1, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	bf38      	it	cc
 80019bc:	2304      	movcc	r3, #4
 80019be:	e04f      	b.n	8001a60 <HAL_I2C_Init+0x1a4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <HAL_I2C_Init+0x130>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e012      	b.n	8001a12 <HAL_I2C_Init+0x156>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e58      	subs	r0, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	0099      	lsls	r1, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Init+0x15e>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e022      	b.n	8001a60 <HAL_I2C_Init+0x1a4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10e      	bne.n	8001a40 <HAL_I2C_Init+0x184>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1e58      	subs	r0, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	440b      	add	r3, r1
 8001a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3e:	e00f      	b.n	8001a60 <HAL_I2C_Init+0x1a4>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6809      	ldr	r1, [r1, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6911      	ldr	r1, [r2, #16]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68d2      	ldr	r2, [r2, #12]
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	000186a0 	.word	0x000186a0
 8001afc:	001e847f 	.word	0x001e847f
 8001b00:	003d08ff 	.word	0x003d08ff
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	817b      	strh	r3, [r7, #10]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fc4a 	bl	80013b8 <HAL_GetTick>
 8001b24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	f040 80e0 	bne.w	8001cf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4970      	ldr	r1, [pc, #448]	; (8001d00 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f958 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0d3      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_I2C_Master_Transmit+0x50>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e0cc      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d007      	beq.n	8001b82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2221      	movs	r2, #33	; 0x21
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	893a      	ldrh	r2, [r7, #8]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc4:	8979      	ldrh	r1, [r7, #10]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f89c 	bl	8001d08 <I2C_MasterRequestWrite>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e08d      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bf0:	e066      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	6a39      	ldr	r1, [r7, #32]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f9d2 	bl	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00d      	beq.n	8001c1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d107      	bne.n	8001c1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d11b      	bne.n	8001c94 <HAL_I2C_Master_Transmit+0x188>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d017      	beq.n	8001c94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	6a39      	ldr	r1, [r7, #32]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f9c2 	bl	8002022 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e01a      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d194      	bne.n	8001bf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	00100002 	.word	0x00100002
 8001d04:	ffff0000 	.word	0xffff0000

08001d08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d006      	beq.n	8001d32 <I2C_MasterRequestWrite+0x2a>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d003      	beq.n	8001d32 <I2C_MasterRequestWrite+0x2a>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d30:	d108      	bne.n	8001d44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e00b      	b.n	8001d5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d107      	bne.n	8001d5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f843 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e035      	b.n	8001de4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d80:	d108      	bne.n	8001d94 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d82:	897b      	ldrh	r3, [r7, #10]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	e01b      	b.n	8001dcc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	11db      	asrs	r3, r3, #7
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 0306 	and.w	r3, r3, #6
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f063 030f 	orn	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <I2C_MasterRequestWrite+0xe4>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f875 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e010      	b.n	8001de4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <I2C_MasterRequestWrite+0xe8>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f865 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010008 	.word	0x00010008
 8001df0:	00010002 	.word	0x00010002

08001df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e04:	e025      	b.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff fad3 	bl	80013b8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e023      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10d      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	e00c      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b6      	beq.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb0:	e051      	b.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d123      	bne.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e046      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f10:	d021      	beq.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7ff fa51 	bl	80013b8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f043 0220 	orr.w	r2, r3, #32
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e00b      	b.n	8001f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d18d      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fac:	e02d      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f878 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02d      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc4:	d021      	beq.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f9f7 	bl	80013b8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d116      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e007      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d1ca      	bne.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202e:	e02d      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f837 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e02d      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002046:	d021      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7ff f9b6 	bl	80013b8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d1ca      	bne.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ba:	d11b      	bne.n	80020f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e26c      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4b8f      	ldr	r3, [pc, #572]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d06c      	beq.n	800222c <HAL_RCC_OscConfig+0x12c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d168      	bne.n	800222c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e246      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x76>
 8002168:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7a      	ldr	r2, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a77      	ldr	r2, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xbc>
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a71      	ldr	r2, [pc, #452]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021bc:	4b6b      	ldr	r3, [pc, #428]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6a      	ldr	r2, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a67      	ldr	r2, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f8ec 	bl	80013b8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff f8e8 	bl	80013b8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1fa      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f8d8 	bl	80013b8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff f8d4 	bl	80013b8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1e6      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x10c>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1ba      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4939      	ldr	r1, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff f88d 	bl	80013b8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff f889 	bl	80013b8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e19b      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4927      	ldr	r1, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f86c 	bl	80013b8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff f868 	bl	80013b8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e17a      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03a      	beq.n	8002384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff f84c 	bl	80013b8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff f848 	bl	80013b8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e15a      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f000 fada 	bl	80028fc <RCC_Delay>
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff f832 	bl	80013b8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff f82e 	bl	80013b8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e140      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	42420000 	.word	0x42420000
 8002374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b9e      	ldr	r3, [pc, #632]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a6 	beq.w	80024de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b97      	ldr	r3, [pc, #604]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a93      	ldr	r2, [pc, #588]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b91      	ldr	r3, [pc, #580]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe ffef 	bl	80013b8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe ffeb 	bl	80013b8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0fd      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a7a      	ldr	r2, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x334>
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a72      	ldr	r2, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x356>
 800243c:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe ff9f 	bl	80013b8 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe ff9b 	bl	80013b8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ab      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x37e>
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ff89 	bl	80013b8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe ff85 	bl	80013b8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e095      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8081 	beq.w	80025ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d146      	bne.n	800258a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe ff59 	bl	80013b8 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe ff55 	bl	80013b8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e067      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	492d      	ldr	r1, [pc, #180]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	430b      	orrs	r3, r1
 8002556:	4927      	ldr	r1, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe ff29 	bl	80013b8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe ff25 	bl	80013b8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e037      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
 8002588:	e02f      	b.n	80025ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_RCC_OscConfig+0x4fc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe ff12 	bl	80013b8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe ff0e 	bl	80013b8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e020      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x498>
 80025b6:	e018      	b.n	80025ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e013      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060

08002600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4965      	ldr	r1, [pc, #404]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e073      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fe62 	bl	80013b8 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fe5e 	bl	80013b8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e053      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d210      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4601      	mov	r1, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	fa21 f303 	lsr.w	r3, r1, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fdc0 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08004298 	.word	0x08004298
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b490      	push	{r4, r7}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027dc:	1d3c      	adds	r4, r7, #4
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x46>
 8002812:	e02d      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002816:	623b      	str	r3, [r7, #32]
      break;
 8002818:	e02d      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002826:	4413      	add	r3, r2
 8002828:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800282c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c5b      	lsrs	r3, r3, #17
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002846:	4413      	add	r3, r2
 8002848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800284c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	623b      	str	r3, [r7, #32]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	6a3b      	ldr	r3, [r7, #32]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc90      	pop	{r4, r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	08004284 	.word	0x08004284
 8002888:	08004294 	.word	0x08004294
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	003d0900 	.word	0x003d0900

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4601      	mov	r1, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	080042a8 	.word	0x080042a8

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffde 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028dc:	4601      	mov	r1, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0adb      	lsrs	r3, r3, #11
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	080042a8 	.word	0x080042a8

080028fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <RCC_Delay+0x34>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <RCC_Delay+0x38>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002918:	bf00      	nop
  }
  while (Delay --);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	60fa      	str	r2, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <RCC_Delay+0x1c>
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e03f      	b.n	80029ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fb94 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f829 	bl	80029d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a0e:	f023 030c 	bic.w	r3, r3, #12
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <UART_SetConfig+0x1ac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d14e      	bne.n	8002ada <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff ff4a 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8002a40:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	0119      	lsls	r1, r3, #4
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a78:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2064      	movs	r0, #100	; 0x64
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a98:	4419      	add	r1, r3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2064      	movs	r0, #100	; 0x64
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002ad8:	e04d      	b.n	8002b76 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ada:	f7ff fee7 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8002ade:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	0119      	lsls	r1, r3, #4
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009a      	lsls	r2, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002b18:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2064      	movs	r0, #100	; 0x64
 8002b20:	fb00 f303 	mul.w	r3, r0, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	3332      	adds	r3, #50	; 0x32
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b36:	4419      	add	r1, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002b50:	fba3 0302 	umull	r0, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	2064      	movs	r0, #100	; 0x64
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	3332      	adds	r3, #50	; 0x32
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <UART_SetConfig+0x1b0>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	440a      	add	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40013800 	.word	0x40013800
 8002b84:	51eb851f 	.word	0x51eb851f

08002b88 <gcvt>:
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	2300      	movs	r3, #0
 8002b90:	4615      	mov	r5, r2
 8002b92:	2200      	movs	r2, #0
 8002b94:	4606      	mov	r6, r0
 8002b96:	460f      	mov	r7, r1
 8002b98:	f7fd ff08 	bl	80009ac <__aeabi_dcmplt>
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	b118      	cbz	r0, 8002ba8 <gcvt+0x20>
 8002ba0:	222d      	movs	r2, #45	; 0x2d
 8002ba2:	3d01      	subs	r5, #1
 8002ba4:	f803 2b01 	strb.w	r2, [r3], #1
 8002ba8:	2267      	movs	r2, #103	; 0x67
 8002baa:	2100      	movs	r1, #0
 8002bac:	e9cd 5300 	strd	r5, r3, [sp]
 8002bb0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8002bb4:	4905      	ldr	r1, [pc, #20]	; (8002bcc <gcvt+0x44>)
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	463b      	mov	r3, r7
 8002bba:	6808      	ldr	r0, [r1, #0]
 8002bbc:	f000 f8b0 	bl	8002d20 <_gcvt>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	4620      	movne	r0, r4
 8002bc6:	2000      	moveq	r0, #0
 8002bc8:	b005      	add	sp, #20
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bcc:	2000000c 	.word	0x2000000c

08002bd0 <__errno>:
 8002bd0:	4b01      	ldr	r3, [pc, #4]	; (8002bd8 <__errno+0x8>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	2500      	movs	r5, #0
 8002be0:	4e0c      	ldr	r6, [pc, #48]	; (8002c14 <__libc_init_array+0x38>)
 8002be2:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be4:	1ba4      	subs	r4, r4, r6
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	42a5      	cmp	r5, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	f001 fb36 	bl	800425c <_init>
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	4e0a      	ldr	r6, [pc, #40]	; (8002c1c <__libc_init_array+0x40>)
 8002bf4:	4c0a      	ldr	r4, [pc, #40]	; (8002c20 <__libc_init_array+0x44>)
 8002bf6:	1ba4      	subs	r4, r4, r6
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	42a5      	cmp	r5, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c04:	4798      	blx	r3
 8002c06:	3501      	adds	r5, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0e:	4798      	blx	r3
 8002c10:	3501      	adds	r5, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	080043bc 	.word	0x080043bc
 8002c18:	080043bc 	.word	0x080043bc
 8002c1c:	080043bc 	.word	0x080043bc
 8002c20:	080043c0 	.word	0x080043c0

08002c24 <memset>:
 8002c24:	4603      	mov	r3, r0
 8002c26:	4402      	add	r2, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <print_e>:
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c36:	b08b      	sub	sp, #44	; 0x2c
 8002c38:	460f      	mov	r7, r1
 8002c3a:	a908      	add	r1, sp, #32
 8002c3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002c3e:	9104      	str	r1, [sp, #16]
 8002c40:	a907      	add	r1, sp, #28
 8002c42:	9103      	str	r1, [sp, #12]
 8002c44:	a909      	add	r1, sp, #36	; 0x24
 8002c46:	9102      	str	r1, [sp, #8]
 8002c48:	1c61      	adds	r1, r4, #1
 8002c4a:	9101      	str	r1, [sp, #4]
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	9100      	str	r1, [sp, #0]
 8002c50:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8002c54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002c56:	f000 fd37 	bl	80036c8 <_dtoa_r>
 8002c5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002c5e:	4601      	mov	r1, r0
 8002c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c62:	4298      	cmp	r0, r3
 8002c64:	d104      	bne.n	8002c70 <print_e+0x3c>
 8002c66:	4638      	mov	r0, r7
 8002c68:	f000 fc98 	bl	800359c <strcpy>
 8002c6c:	b00b      	add	sp, #44	; 0x2c
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	780b      	ldrb	r3, [r1, #0]
 8002c72:	703b      	strb	r3, [r7, #0]
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d142      	bne.n	8002cfe <print_e+0xca>
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	d140      	bne.n	8002cfe <print_e+0xca>
 8002c7c:	1c7b      	adds	r3, r7, #1
 8002c7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002c82:	b10a      	cbz	r2, 8002c88 <print_e+0x54>
 8002c84:	2c00      	cmp	r4, #0
 8002c86:	dc3e      	bgt.n	8002d06 <print_e+0xd2>
 8002c88:	2e67      	cmp	r6, #103	; 0x67
 8002c8a:	d043      	beq.n	8002d14 <print_e+0xe0>
 8002c8c:	2e47      	cmp	r6, #71	; 0x47
 8002c8e:	d043      	beq.n	8002d18 <print_e+0xe4>
 8002c90:	461a      	mov	r2, r3
 8002c92:	2730      	movs	r7, #48	; 0x30
 8002c94:	191d      	adds	r5, r3, r4
 8002c96:	1aa9      	subs	r1, r5, r2
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	dc38      	bgt.n	8002d0e <print_e+0xda>
 8002c9c:	2c00      	cmp	r4, #0
 8002c9e:	bfa8      	it	ge
 8002ca0:	191b      	addge	r3, r3, r4
 8002ca2:	1e41      	subs	r1, r0, #1
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	9109      	str	r1, [sp, #36]	; 0x24
 8002ca8:	461a      	mov	r2, r3
 8002caa:	bfb7      	itett	lt
 8002cac:	212d      	movlt	r1, #45	; 0x2d
 8002cae:	212b      	movge	r1, #43	; 0x2b
 8002cb0:	f1c0 0001 	rsblt	r0, r0, #1
 8002cb4:	9009      	strlt	r0, [sp, #36]	; 0x24
 8002cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cb8:	f802 6b02 	strb.w	r6, [r2], #2
 8002cbc:	bfb4      	ite	lt
 8002cbe:	7059      	strblt	r1, [r3, #1]
 8002cc0:	7059      	strbge	r1, [r3, #1]
 8002cc2:	2863      	cmp	r0, #99	; 0x63
 8002cc4:	dd0b      	ble.n	8002cde <print_e+0xaa>
 8002cc6:	2164      	movs	r1, #100	; 0x64
 8002cc8:	fb90 f1f1 	sdiv	r1, r0, r1
 8002ccc:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002cd0:	1cda      	adds	r2, r3, #3
 8002cd2:	709c      	strb	r4, [r3, #2]
 8002cd4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002cd8:	fb03 0101 	mla	r1, r3, r1, r0
 8002cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8002cde:	230a      	movs	r3, #10
 8002ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ce2:	fb91 f3f3 	sdiv	r3, r1, r3
 8002ce6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002cea:	7010      	strb	r0, [r2, #0]
 8002cec:	f06f 0009 	mvn.w	r0, #9
 8002cf0:	fb00 1303 	mla	r3, r0, r3, r1
 8002cf4:	3330      	adds	r3, #48	; 0x30
 8002cf6:	7053      	strb	r3, [r2, #1]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	7093      	strb	r3, [r2, #2]
 8002cfc:	e7b6      	b.n	8002c6c <print_e+0x38>
 8002cfe:	222e      	movs	r2, #46	; 0x2e
 8002d00:	1cbb      	adds	r3, r7, #2
 8002d02:	707a      	strb	r2, [r7, #1]
 8002d04:	e7bb      	b.n	8002c7e <print_e+0x4a>
 8002d06:	f803 2b01 	strb.w	r2, [r3], #1
 8002d0a:	3c01      	subs	r4, #1
 8002d0c:	e7b7      	b.n	8002c7e <print_e+0x4a>
 8002d0e:	f802 7b01 	strb.w	r7, [r2], #1
 8002d12:	e7c0      	b.n	8002c96 <print_e+0x62>
 8002d14:	2665      	movs	r6, #101	; 0x65
 8002d16:	e7c4      	b.n	8002ca2 <print_e+0x6e>
 8002d18:	2645      	movs	r6, #69	; 0x45
 8002d1a:	e7c2      	b.n	8002ca2 <print_e+0x6e>
 8002d1c:	0000      	movs	r0, r0
	...

08002d20 <_gcvt>:
 8002d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d24:	4617      	mov	r7, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	b08b      	sub	sp, #44	; 0x2c
 8002d2a:	4681      	mov	r9, r0
 8002d2c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8002d30:	2200      	movs	r2, #0
 8002d32:	2300      	movs	r3, #0
 8002d34:	4638      	mov	r0, r7
 8002d36:	4629      	mov	r1, r5
 8002d38:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8002d3c:	f7fd fe36 	bl	80009ac <__aeabi_dcmplt>
 8002d40:	b108      	cbz	r0, 8002d46 <_gcvt+0x26>
 8002d42:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002d46:	2200      	movs	r2, #0
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fe23 	bl	8000998 <__aeabi_dcmpeq>
 8002d52:	b138      	cbz	r0, 8002d64 <_gcvt+0x44>
 8002d54:	2330      	movs	r3, #48	; 0x30
 8002d56:	7023      	strb	r3, [r4, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	7063      	strb	r3, [r4, #1]
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	b00b      	add	sp, #44	; 0x2c
 8002d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d64:	a352      	add	r3, pc, #328	; (adr r3, 8002eb0 <_gcvt+0x190>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f7fd fe27 	bl	80009c0 <__aeabi_dcmple>
 8002d72:	b168      	cbz	r0, 8002d90 <_gcvt+0x70>
 8002d74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8002d78:	3e01      	subs	r6, #1
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002d80:	9600      	str	r6, [sp, #0]
 8002d82:	463a      	mov	r2, r7
 8002d84:	462b      	mov	r3, r5
 8002d86:	4621      	mov	r1, r4
 8002d88:	4648      	mov	r0, r9
 8002d8a:	f7ff ff53 	bl	8002c34 <print_e>
 8002d8e:	e7e5      	b.n	8002d5c <_gcvt+0x3c>
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 fb6f 	bl	8003474 <_mprec_log10>
 8002d96:	463a      	mov	r2, r7
 8002d98:	462b      	mov	r3, r5
 8002d9a:	f7fd fe11 	bl	80009c0 <__aeabi_dcmple>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1e8      	bne.n	8002d74 <_gcvt+0x54>
 8002da2:	2200      	movs	r2, #0
 8002da4:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <_gcvt+0x198>)
 8002da6:	4629      	mov	r1, r5
 8002da8:	4638      	mov	r0, r7
 8002daa:	f7fd fdff 	bl	80009ac <__aeabi_dcmplt>
 8002dae:	a909      	add	r1, sp, #36	; 0x24
 8002db0:	aa08      	add	r2, sp, #32
 8002db2:	ab07      	add	r3, sp, #28
 8002db4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8002db8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8002dbc:	b388      	cbz	r0, 8002e22 <_gcvt+0x102>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	463a      	mov	r2, r7
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f000 fc7e 	bl	80036c8 <_dtoa_r>
 8002dcc:	f242 730f 	movw	r3, #9999	; 0x270f
 8002dd0:	9a07      	ldr	r2, [sp, #28]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d027      	beq.n	8002e26 <_gcvt+0x106>
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	4426      	add	r6, r4
 8002dda:	4607      	mov	r7, r0
 8002ddc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002de0:	1af2      	subs	r2, r6, r3
 8002de2:	9d07      	ldr	r5, [sp, #28]
 8002de4:	b349      	cbz	r1, 8002e3a <_gcvt+0x11a>
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	dc22      	bgt.n	8002e30 <_gcvt+0x110>
 8002dea:	f1b8 0f00 	cmp.w	r8, #0
 8002dee:	d102      	bne.n	8002df6 <_gcvt+0xd6>
 8002df0:	7839      	ldrb	r1, [r7, #0]
 8002df2:	2900      	cmp	r1, #0
 8002df4:	d049      	beq.n	8002e8a <_gcvt+0x16a>
 8002df6:	429c      	cmp	r4, r3
 8002df8:	bf04      	itt	eq
 8002dfa:	2130      	moveq	r1, #48	; 0x30
 8002dfc:	7021      	strbeq	r1, [r4, #0]
 8002dfe:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f04f 0630 	mov.w	r6, #48	; 0x30
 8002e0a:	bf08      	it	eq
 8002e0c:	1c63      	addeq	r3, r4, #1
 8002e0e:	7019      	strb	r1, [r3, #0]
 8002e10:	9907      	ldr	r1, [sp, #28]
 8002e12:	3301      	adds	r3, #1
 8002e14:	2900      	cmp	r1, #0
 8002e16:	460d      	mov	r5, r1
 8002e18:	db24      	blt.n	8002e64 <_gcvt+0x144>
 8002e1a:	b100      	cbz	r0, 8002e1e <_gcvt+0xfe>
 8002e1c:	9107      	str	r1, [sp, #28]
 8002e1e:	1e79      	subs	r1, r7, #1
 8002e20:	e02b      	b.n	8002e7a <_gcvt+0x15a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e7cc      	b.n	8002dc0 <_gcvt+0xa0>
 8002e26:	4601      	mov	r1, r0
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 fbb7 	bl	800359c <strcpy>
 8002e2e:	e795      	b.n	8002d5c <_gcvt+0x3c>
 8002e30:	3d01      	subs	r5, #1
 8002e32:	f803 1b01 	strb.w	r1, [r3], #1
 8002e36:	9507      	str	r5, [sp, #28]
 8002e38:	e7cf      	b.n	8002dda <_gcvt+0xba>
 8002e3a:	1aad      	subs	r5, r5, r2
 8002e3c:	2630      	movs	r6, #48	; 0x30
 8002e3e:	e005      	b.n	8002e4c <_gcvt+0x12c>
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	dd06      	ble.n	8002e52 <_gcvt+0x132>
 8002e44:	2101      	movs	r1, #1
 8002e46:	f803 6b01 	strb.w	r6, [r3], #1
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	18a8      	adds	r0, r5, r2
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	dcf6      	bgt.n	8002e40 <_gcvt+0x120>
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d0c9      	beq.n	8002dea <_gcvt+0xca>
 8002e56:	9007      	str	r0, [sp, #28]
 8002e58:	e7c7      	b.n	8002dea <_gcvt+0xca>
 8002e5a:	f803 6b01 	strb.w	r6, [r3], #1
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	2001      	movs	r0, #1
 8002e62:	e7d7      	b.n	8002e14 <_gcvt+0xf4>
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	f101 0101 	add.w	r1, r1, #1
 8002e6a:	dcf6      	bgt.n	8002e5a <_gcvt+0x13a>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d0d6      	beq.n	8002e1e <_gcvt+0xfe>
 8002e70:	9507      	str	r5, [sp, #28]
 8002e72:	e7d4      	b.n	8002e1e <_gcvt+0xfe>
 8002e74:	f803 0b01 	strb.w	r0, [r3], #1
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002e7e:	b108      	cbz	r0, 8002e84 <_gcvt+0x164>
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	dcf7      	bgt.n	8002e74 <_gcvt+0x154>
 8002e84:	f1b8 0f00 	cmp.w	r8, #0
 8002e88:	d10b      	bne.n	8002ea2 <_gcvt+0x182>
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e765      	b.n	8002d5c <_gcvt+0x3c>
 8002e90:	f801 6b01 	strb.w	r6, [r1], #1
 8002e94:	1a68      	subs	r0, r5, r1
 8002e96:	2800      	cmp	r0, #0
 8002e98:	dcfa      	bgt.n	8002e90 <_gcvt+0x170>
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	bfa8      	it	ge
 8002e9e:	189b      	addge	r3, r3, r2
 8002ea0:	e7f3      	b.n	8002e8a <_gcvt+0x16a>
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	189d      	adds	r5, r3, r2
 8002ea6:	2630      	movs	r6, #48	; 0x30
 8002ea8:	e7f4      	b.n	8002e94 <_gcvt+0x174>
 8002eaa:	bf00      	nop
 8002eac:	f3af 8000 	nop.w
 8002eb0:	eb1c432d 	.word	0xeb1c432d
 8002eb4:	3f1a36e2 	.word	0x3f1a36e2
 8002eb8:	3ff00000 	.word	0x3ff00000

08002ebc <_Balloc>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	460e      	mov	r6, r1
 8002ec4:	b93d      	cbnz	r5, 8002ed6 <_Balloc+0x1a>
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	f001 f9b2 	bl	8004230 <malloc>
 8002ecc:	6260      	str	r0, [r4, #36]	; 0x24
 8002ece:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002ed2:	6005      	str	r5, [r0, #0]
 8002ed4:	60c5      	str	r5, [r0, #12]
 8002ed6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ed8:	68eb      	ldr	r3, [r5, #12]
 8002eda:	b183      	cbz	r3, 8002efe <_Balloc+0x42>
 8002edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002ee4:	b9b8      	cbnz	r0, 8002f16 <_Balloc+0x5a>
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f506 	lsl.w	r5, r1, r6
 8002eec:	1d6a      	adds	r2, r5, #5
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 fadb 	bl	80034ac <_calloc_r>
 8002ef6:	b160      	cbz	r0, 8002f12 <_Balloc+0x56>
 8002ef8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8002efc:	e00e      	b.n	8002f1c <_Balloc+0x60>
 8002efe:	2221      	movs	r2, #33	; 0x21
 8002f00:	2104      	movs	r1, #4
 8002f02:	4620      	mov	r0, r4
 8002f04:	f000 fad2 	bl	80034ac <_calloc_r>
 8002f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f0a:	60e8      	str	r0, [r5, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e4      	bne.n	8002edc <_Balloc+0x20>
 8002f12:	2000      	movs	r0, #0
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002f22:	e7f7      	b.n	8002f14 <_Balloc+0x58>

08002f24 <_Bfree>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002f28:	4606      	mov	r6, r0
 8002f2a:	460d      	mov	r5, r1
 8002f2c:	b93c      	cbnz	r4, 8002f3e <_Bfree+0x1a>
 8002f2e:	2010      	movs	r0, #16
 8002f30:	f001 f97e 	bl	8004230 <malloc>
 8002f34:	6270      	str	r0, [r6, #36]	; 0x24
 8002f36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002f3a:	6004      	str	r4, [r0, #0]
 8002f3c:	60c4      	str	r4, [r0, #12]
 8002f3e:	b13d      	cbz	r5, 8002f50 <_Bfree+0x2c>
 8002f40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002f42:	686a      	ldr	r2, [r5, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f4a:	6029      	str	r1, [r5, #0]
 8002f4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002f50:	bd70      	pop	{r4, r5, r6, pc}

08002f52 <__multadd>:
 8002f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f56:	461f      	mov	r7, r3
 8002f58:	4606      	mov	r6, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	690d      	ldr	r5, [r1, #16]
 8002f60:	f101 0c14 	add.w	ip, r1, #20
 8002f64:	f8dc 0000 	ldr.w	r0, [ip]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b281      	uxth	r1, r0
 8002f6c:	fb02 7101 	mla	r1, r2, r1, r7
 8002f70:	0c00      	lsrs	r0, r0, #16
 8002f72:	0c0f      	lsrs	r7, r1, #16
 8002f74:	fb02 7000 	mla	r0, r2, r0, r7
 8002f78:	b289      	uxth	r1, r1
 8002f7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8002f7e:	429d      	cmp	r5, r3
 8002f80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8002f84:	f84c 1b04 	str.w	r1, [ip], #4
 8002f88:	dcec      	bgt.n	8002f64 <__multadd+0x12>
 8002f8a:	b1d7      	cbz	r7, 8002fc2 <__multadd+0x70>
 8002f8c:	68a3      	ldr	r3, [r4, #8]
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	dc12      	bgt.n	8002fb8 <__multadd+0x66>
 8002f92:	6861      	ldr	r1, [r4, #4]
 8002f94:	4630      	mov	r0, r6
 8002f96:	3101      	adds	r1, #1
 8002f98:	f7ff ff90 	bl	8002ebc <_Balloc>
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	6922      	ldr	r2, [r4, #16]
 8002fa0:	f104 010c 	add.w	r1, r4, #12
 8002fa4:	3202      	adds	r2, #2
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	300c      	adds	r0, #12
 8002faa:	f001 f949 	bl	8004240 <memcpy>
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f7ff ffb7 	bl	8002f24 <_Bfree>
 8002fb6:	4644      	mov	r4, r8
 8002fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	615f      	str	r7, [r3, #20]
 8002fc0:	6125      	str	r5, [r4, #16]
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fc8 <__hi0bits>:
 8002fc8:	0c02      	lsrs	r2, r0, #16
 8002fca:	0412      	lsls	r2, r2, #16
 8002fcc:	4603      	mov	r3, r0
 8002fce:	b9b2      	cbnz	r2, 8002ffe <__hi0bits+0x36>
 8002fd0:	0403      	lsls	r3, r0, #16
 8002fd2:	2010      	movs	r0, #16
 8002fd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8002fd8:	bf04      	itt	eq
 8002fda:	021b      	lsleq	r3, r3, #8
 8002fdc:	3008      	addeq	r0, #8
 8002fde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8002fe2:	bf04      	itt	eq
 8002fe4:	011b      	lsleq	r3, r3, #4
 8002fe6:	3004      	addeq	r0, #4
 8002fe8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8002fec:	bf04      	itt	eq
 8002fee:	009b      	lsleq	r3, r3, #2
 8002ff0:	3002      	addeq	r0, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db06      	blt.n	8003004 <__hi0bits+0x3c>
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	d503      	bpl.n	8003002 <__hi0bits+0x3a>
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	4770      	bx	lr
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7e8      	b.n	8002fd4 <__hi0bits+0xc>
 8003002:	2020      	movs	r0, #32
 8003004:	4770      	bx	lr

08003006 <__lo0bits>:
 8003006:	6803      	ldr	r3, [r0, #0]
 8003008:	4601      	mov	r1, r0
 800300a:	f013 0207 	ands.w	r2, r3, #7
 800300e:	d00b      	beq.n	8003028 <__lo0bits+0x22>
 8003010:	07da      	lsls	r2, r3, #31
 8003012:	d423      	bmi.n	800305c <__lo0bits+0x56>
 8003014:	0798      	lsls	r0, r3, #30
 8003016:	bf49      	itett	mi
 8003018:	085b      	lsrmi	r3, r3, #1
 800301a:	089b      	lsrpl	r3, r3, #2
 800301c:	2001      	movmi	r0, #1
 800301e:	600b      	strmi	r3, [r1, #0]
 8003020:	bf5c      	itt	pl
 8003022:	600b      	strpl	r3, [r1, #0]
 8003024:	2002      	movpl	r0, #2
 8003026:	4770      	bx	lr
 8003028:	b298      	uxth	r0, r3
 800302a:	b9a8      	cbnz	r0, 8003058 <__lo0bits+0x52>
 800302c:	2010      	movs	r0, #16
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003034:	bf04      	itt	eq
 8003036:	0a1b      	lsreq	r3, r3, #8
 8003038:	3008      	addeq	r0, #8
 800303a:	071a      	lsls	r2, r3, #28
 800303c:	bf04      	itt	eq
 800303e:	091b      	lsreq	r3, r3, #4
 8003040:	3004      	addeq	r0, #4
 8003042:	079a      	lsls	r2, r3, #30
 8003044:	bf04      	itt	eq
 8003046:	089b      	lsreq	r3, r3, #2
 8003048:	3002      	addeq	r0, #2
 800304a:	07da      	lsls	r2, r3, #31
 800304c:	d402      	bmi.n	8003054 <__lo0bits+0x4e>
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	d006      	beq.n	8003060 <__lo0bits+0x5a>
 8003052:	3001      	adds	r0, #1
 8003054:	600b      	str	r3, [r1, #0]
 8003056:	4770      	bx	lr
 8003058:	4610      	mov	r0, r2
 800305a:	e7e9      	b.n	8003030 <__lo0bits+0x2a>
 800305c:	2000      	movs	r0, #0
 800305e:	4770      	bx	lr
 8003060:	2020      	movs	r0, #32
 8003062:	4770      	bx	lr

08003064 <__i2b>:
 8003064:	b510      	push	{r4, lr}
 8003066:	460c      	mov	r4, r1
 8003068:	2101      	movs	r1, #1
 800306a:	f7ff ff27 	bl	8002ebc <_Balloc>
 800306e:	2201      	movs	r2, #1
 8003070:	6144      	str	r4, [r0, #20]
 8003072:	6102      	str	r2, [r0, #16]
 8003074:	bd10      	pop	{r4, pc}

08003076 <__multiply>:
 8003076:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307a:	4614      	mov	r4, r2
 800307c:	690a      	ldr	r2, [r1, #16]
 800307e:	6923      	ldr	r3, [r4, #16]
 8003080:	4688      	mov	r8, r1
 8003082:	429a      	cmp	r2, r3
 8003084:	bfbe      	ittt	lt
 8003086:	460b      	movlt	r3, r1
 8003088:	46a0      	movlt	r8, r4
 800308a:	461c      	movlt	r4, r3
 800308c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003090:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003094:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003098:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800309c:	eb07 0609 	add.w	r6, r7, r9
 80030a0:	42b3      	cmp	r3, r6
 80030a2:	bfb8      	it	lt
 80030a4:	3101      	addlt	r1, #1
 80030a6:	f7ff ff09 	bl	8002ebc <_Balloc>
 80030aa:	f100 0514 	add.w	r5, r0, #20
 80030ae:	462b      	mov	r3, r5
 80030b0:	2200      	movs	r2, #0
 80030b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80030b6:	4573      	cmp	r3, lr
 80030b8:	d316      	bcc.n	80030e8 <__multiply+0x72>
 80030ba:	f104 0214 	add.w	r2, r4, #20
 80030be:	f108 0114 	add.w	r1, r8, #20
 80030c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80030c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	9b00      	ldr	r3, [sp, #0]
 80030ce:	9201      	str	r2, [sp, #4]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d80c      	bhi.n	80030ee <__multiply+0x78>
 80030d4:	2e00      	cmp	r6, #0
 80030d6:	dd03      	ble.n	80030e0 <__multiply+0x6a>
 80030d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d05d      	beq.n	800319c <__multiply+0x126>
 80030e0:	6106      	str	r6, [r0, #16]
 80030e2:	b003      	add	sp, #12
 80030e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e8:	f843 2b04 	str.w	r2, [r3], #4
 80030ec:	e7e3      	b.n	80030b6 <__multiply+0x40>
 80030ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80030f2:	f1bb 0f00 	cmp.w	fp, #0
 80030f6:	d023      	beq.n	8003140 <__multiply+0xca>
 80030f8:	4689      	mov	r9, r1
 80030fa:	46ac      	mov	ip, r5
 80030fc:	f04f 0800 	mov.w	r8, #0
 8003100:	f859 4b04 	ldr.w	r4, [r9], #4
 8003104:	f8dc a000 	ldr.w	sl, [ip]
 8003108:	b2a3      	uxth	r3, r4
 800310a:	fa1f fa8a 	uxth.w	sl, sl
 800310e:	fb0b a303 	mla	r3, fp, r3, sl
 8003112:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003116:	f8dc 4000 	ldr.w	r4, [ip]
 800311a:	4443      	add	r3, r8
 800311c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003120:	fb0b 840a 	mla	r4, fp, sl, r8
 8003124:	46e2      	mov	sl, ip
 8003126:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800312a:	b29b      	uxth	r3, r3
 800312c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003130:	454f      	cmp	r7, r9
 8003132:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003136:	f84a 3b04 	str.w	r3, [sl], #4
 800313a:	d82b      	bhi.n	8003194 <__multiply+0x11e>
 800313c:	f8cc 8004 	str.w	r8, [ip, #4]
 8003140:	9b01      	ldr	r3, [sp, #4]
 8003142:	3204      	adds	r2, #4
 8003144:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003148:	f1ba 0f00 	cmp.w	sl, #0
 800314c:	d020      	beq.n	8003190 <__multiply+0x11a>
 800314e:	4689      	mov	r9, r1
 8003150:	46a8      	mov	r8, r5
 8003152:	f04f 0b00 	mov.w	fp, #0
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	f8b9 c000 	ldrh.w	ip, [r9]
 800315c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003160:	b29b      	uxth	r3, r3
 8003162:	fb0a 440c 	mla	r4, sl, ip, r4
 8003166:	46c4      	mov	ip, r8
 8003168:	445c      	add	r4, fp
 800316a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800316e:	f84c 3b04 	str.w	r3, [ip], #4
 8003172:	f859 3b04 	ldr.w	r3, [r9], #4
 8003176:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	fb0a b303 	mla	r3, sl, r3, fp
 8003180:	454f      	cmp	r7, r9
 8003182:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003186:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800318a:	d805      	bhi.n	8003198 <__multiply+0x122>
 800318c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003190:	3504      	adds	r5, #4
 8003192:	e79b      	b.n	80030cc <__multiply+0x56>
 8003194:	46d4      	mov	ip, sl
 8003196:	e7b3      	b.n	8003100 <__multiply+0x8a>
 8003198:	46e0      	mov	r8, ip
 800319a:	e7dd      	b.n	8003158 <__multiply+0xe2>
 800319c:	3e01      	subs	r6, #1
 800319e:	e799      	b.n	80030d4 <__multiply+0x5e>

080031a0 <__pow5mult>:
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a4:	4615      	mov	r5, r2
 80031a6:	f012 0203 	ands.w	r2, r2, #3
 80031aa:	4606      	mov	r6, r0
 80031ac:	460f      	mov	r7, r1
 80031ae:	d007      	beq.n	80031c0 <__pow5mult+0x20>
 80031b0:	4c21      	ldr	r4, [pc, #132]	; (8003238 <__pow5mult+0x98>)
 80031b2:	3a01      	subs	r2, #1
 80031b4:	2300      	movs	r3, #0
 80031b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80031ba:	f7ff feca 	bl	8002f52 <__multadd>
 80031be:	4607      	mov	r7, r0
 80031c0:	10ad      	asrs	r5, r5, #2
 80031c2:	d035      	beq.n	8003230 <__pow5mult+0x90>
 80031c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80031c6:	b93c      	cbnz	r4, 80031d8 <__pow5mult+0x38>
 80031c8:	2010      	movs	r0, #16
 80031ca:	f001 f831 	bl	8004230 <malloc>
 80031ce:	6270      	str	r0, [r6, #36]	; 0x24
 80031d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80031d4:	6004      	str	r4, [r0, #0]
 80031d6:	60c4      	str	r4, [r0, #12]
 80031d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80031dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80031e0:	b94c      	cbnz	r4, 80031f6 <__pow5mult+0x56>
 80031e2:	f240 2171 	movw	r1, #625	; 0x271
 80031e6:	4630      	mov	r0, r6
 80031e8:	f7ff ff3c 	bl	8003064 <__i2b>
 80031ec:	2300      	movs	r3, #0
 80031ee:	4604      	mov	r4, r0
 80031f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80031f4:	6003      	str	r3, [r0, #0]
 80031f6:	f04f 0800 	mov.w	r8, #0
 80031fa:	07eb      	lsls	r3, r5, #31
 80031fc:	d50a      	bpl.n	8003214 <__pow5mult+0x74>
 80031fe:	4639      	mov	r1, r7
 8003200:	4622      	mov	r2, r4
 8003202:	4630      	mov	r0, r6
 8003204:	f7ff ff37 	bl	8003076 <__multiply>
 8003208:	4681      	mov	r9, r0
 800320a:	4639      	mov	r1, r7
 800320c:	4630      	mov	r0, r6
 800320e:	f7ff fe89 	bl	8002f24 <_Bfree>
 8003212:	464f      	mov	r7, r9
 8003214:	106d      	asrs	r5, r5, #1
 8003216:	d00b      	beq.n	8003230 <__pow5mult+0x90>
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	b938      	cbnz	r0, 800322c <__pow5mult+0x8c>
 800321c:	4622      	mov	r2, r4
 800321e:	4621      	mov	r1, r4
 8003220:	4630      	mov	r0, r6
 8003222:	f7ff ff28 	bl	8003076 <__multiply>
 8003226:	6020      	str	r0, [r4, #0]
 8003228:	f8c0 8000 	str.w	r8, [r0]
 800322c:	4604      	mov	r4, r0
 800322e:	e7e4      	b.n	80031fa <__pow5mult+0x5a>
 8003230:	4638      	mov	r0, r7
 8003232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003236:	bf00      	nop
 8003238:	080043a0 	.word	0x080043a0

0800323c <__lshift>:
 800323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	460c      	mov	r4, r1
 8003242:	4607      	mov	r7, r0
 8003244:	4616      	mov	r6, r2
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800324c:	eb0a 0903 	add.w	r9, sl, r3
 8003250:	6849      	ldr	r1, [r1, #4]
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	f109 0501 	add.w	r5, r9, #1
 8003258:	42ab      	cmp	r3, r5
 800325a:	db32      	blt.n	80032c2 <__lshift+0x86>
 800325c:	4638      	mov	r0, r7
 800325e:	f7ff fe2d 	bl	8002ebc <_Balloc>
 8003262:	2300      	movs	r3, #0
 8003264:	4680      	mov	r8, r0
 8003266:	461a      	mov	r2, r3
 8003268:	f100 0114 	add.w	r1, r0, #20
 800326c:	4553      	cmp	r3, sl
 800326e:	db2b      	blt.n	80032c8 <__lshift+0x8c>
 8003270:	6920      	ldr	r0, [r4, #16]
 8003272:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003276:	f104 0314 	add.w	r3, r4, #20
 800327a:	f016 021f 	ands.w	r2, r6, #31
 800327e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003282:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003286:	d025      	beq.n	80032d4 <__lshift+0x98>
 8003288:	2000      	movs	r0, #0
 800328a:	f1c2 0e20 	rsb	lr, r2, #32
 800328e:	468a      	mov	sl, r1
 8003290:	681e      	ldr	r6, [r3, #0]
 8003292:	4096      	lsls	r6, r2
 8003294:	4330      	orrs	r0, r6
 8003296:	f84a 0b04 	str.w	r0, [sl], #4
 800329a:	f853 0b04 	ldr.w	r0, [r3], #4
 800329e:	459c      	cmp	ip, r3
 80032a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80032a4:	d814      	bhi.n	80032d0 <__lshift+0x94>
 80032a6:	6048      	str	r0, [r1, #4]
 80032a8:	b108      	cbz	r0, 80032ae <__lshift+0x72>
 80032aa:	f109 0502 	add.w	r5, r9, #2
 80032ae:	3d01      	subs	r5, #1
 80032b0:	4638      	mov	r0, r7
 80032b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80032b6:	4621      	mov	r1, r4
 80032b8:	f7ff fe34 	bl	8002f24 <_Bfree>
 80032bc:	4640      	mov	r0, r8
 80032be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c2:	3101      	adds	r1, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	e7c7      	b.n	8003258 <__lshift+0x1c>
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032cc:	3301      	adds	r3, #1
 80032ce:	e7cd      	b.n	800326c <__lshift+0x30>
 80032d0:	4651      	mov	r1, sl
 80032d2:	e7dc      	b.n	800328e <__lshift+0x52>
 80032d4:	3904      	subs	r1, #4
 80032d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032da:	459c      	cmp	ip, r3
 80032dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80032e0:	d8f9      	bhi.n	80032d6 <__lshift+0x9a>
 80032e2:	e7e4      	b.n	80032ae <__lshift+0x72>

080032e4 <__mcmp>:
 80032e4:	6903      	ldr	r3, [r0, #16]
 80032e6:	690a      	ldr	r2, [r1, #16]
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	d10c      	bne.n	8003308 <__mcmp+0x24>
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	3014      	adds	r0, #20
 80032f2:	3114      	adds	r1, #20
 80032f4:	1884      	adds	r4, r0, r2
 80032f6:	4411      	add	r1, r2
 80032f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80032fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003300:	4295      	cmp	r5, r2
 8003302:	d003      	beq.n	800330c <__mcmp+0x28>
 8003304:	d305      	bcc.n	8003312 <__mcmp+0x2e>
 8003306:	2301      	movs	r3, #1
 8003308:	4618      	mov	r0, r3
 800330a:	bd30      	pop	{r4, r5, pc}
 800330c:	42a0      	cmp	r0, r4
 800330e:	d3f3      	bcc.n	80032f8 <__mcmp+0x14>
 8003310:	e7fa      	b.n	8003308 <__mcmp+0x24>
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003316:	e7f7      	b.n	8003308 <__mcmp+0x24>

08003318 <__mdiff>:
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800331c:	460d      	mov	r5, r1
 800331e:	4607      	mov	r7, r0
 8003320:	4611      	mov	r1, r2
 8003322:	4628      	mov	r0, r5
 8003324:	4614      	mov	r4, r2
 8003326:	f7ff ffdd 	bl	80032e4 <__mcmp>
 800332a:	1e06      	subs	r6, r0, #0
 800332c:	d108      	bne.n	8003340 <__mdiff+0x28>
 800332e:	4631      	mov	r1, r6
 8003330:	4638      	mov	r0, r7
 8003332:	f7ff fdc3 	bl	8002ebc <_Balloc>
 8003336:	2301      	movs	r3, #1
 8003338:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	bfa4      	itt	ge
 8003342:	4623      	movge	r3, r4
 8003344:	462c      	movge	r4, r5
 8003346:	4638      	mov	r0, r7
 8003348:	6861      	ldr	r1, [r4, #4]
 800334a:	bfa6      	itte	ge
 800334c:	461d      	movge	r5, r3
 800334e:	2600      	movge	r6, #0
 8003350:	2601      	movlt	r6, #1
 8003352:	f7ff fdb3 	bl	8002ebc <_Balloc>
 8003356:	f04f 0e00 	mov.w	lr, #0
 800335a:	60c6      	str	r6, [r0, #12]
 800335c:	692b      	ldr	r3, [r5, #16]
 800335e:	6926      	ldr	r6, [r4, #16]
 8003360:	f104 0214 	add.w	r2, r4, #20
 8003364:	f105 0914 	add.w	r9, r5, #20
 8003368:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800336c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003370:	f100 0114 	add.w	r1, r0, #20
 8003374:	f852 ab04 	ldr.w	sl, [r2], #4
 8003378:	f859 5b04 	ldr.w	r5, [r9], #4
 800337c:	fa1f f38a 	uxth.w	r3, sl
 8003380:	4473      	add	r3, lr
 8003382:	b2ac      	uxth	r4, r5
 8003384:	1b1b      	subs	r3, r3, r4
 8003386:	0c2c      	lsrs	r4, r5, #16
 8003388:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800338c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003390:	b29b      	uxth	r3, r3
 8003392:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003396:	45c8      	cmp	r8, r9
 8003398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800339c:	4694      	mov	ip, r2
 800339e:	f841 4b04 	str.w	r4, [r1], #4
 80033a2:	d8e7      	bhi.n	8003374 <__mdiff+0x5c>
 80033a4:	45bc      	cmp	ip, r7
 80033a6:	d304      	bcc.n	80033b2 <__mdiff+0x9a>
 80033a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80033ac:	b183      	cbz	r3, 80033d0 <__mdiff+0xb8>
 80033ae:	6106      	str	r6, [r0, #16]
 80033b0:	e7c4      	b.n	800333c <__mdiff+0x24>
 80033b2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80033b6:	b2a2      	uxth	r2, r4
 80033b8:	4472      	add	r2, lr
 80033ba:	1413      	asrs	r3, r2, #16
 80033bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80033c0:	b292      	uxth	r2, r2
 80033c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80033c6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80033ca:	f841 2b04 	str.w	r2, [r1], #4
 80033ce:	e7e9      	b.n	80033a4 <__mdiff+0x8c>
 80033d0:	3e01      	subs	r6, #1
 80033d2:	e7e9      	b.n	80033a8 <__mdiff+0x90>

080033d4 <__d2b>:
 80033d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80033d8:	461c      	mov	r4, r3
 80033da:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80033de:	2101      	movs	r1, #1
 80033e0:	4690      	mov	r8, r2
 80033e2:	f7ff fd6b 	bl	8002ebc <_Balloc>
 80033e6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80033ea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80033ee:	4607      	mov	r7, r0
 80033f0:	bb34      	cbnz	r4, 8003440 <__d2b+0x6c>
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	f1b8 0200 	subs.w	r2, r8, #0
 80033f8:	d027      	beq.n	800344a <__d2b+0x76>
 80033fa:	a802      	add	r0, sp, #8
 80033fc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003400:	f7ff fe01 	bl	8003006 <__lo0bits>
 8003404:	9900      	ldr	r1, [sp, #0]
 8003406:	b1f0      	cbz	r0, 8003446 <__d2b+0x72>
 8003408:	9a01      	ldr	r2, [sp, #4]
 800340a:	f1c0 0320 	rsb	r3, r0, #32
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	430b      	orrs	r3, r1
 8003414:	40c2      	lsrs	r2, r0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	9201      	str	r2, [sp, #4]
 800341a:	9b01      	ldr	r3, [sp, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2102      	movne	r1, #2
 8003422:	2101      	moveq	r1, #1
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	6139      	str	r1, [r7, #16]
 8003428:	b1c4      	cbz	r4, 800345c <__d2b+0x88>
 800342a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800342e:	4404      	add	r4, r0
 8003430:	6034      	str	r4, [r6, #0]
 8003432:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003436:	6028      	str	r0, [r5, #0]
 8003438:	4638      	mov	r0, r7
 800343a:	b002      	add	sp, #8
 800343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003440:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003444:	e7d5      	b.n	80033f2 <__d2b+0x1e>
 8003446:	6179      	str	r1, [r7, #20]
 8003448:	e7e7      	b.n	800341a <__d2b+0x46>
 800344a:	a801      	add	r0, sp, #4
 800344c:	f7ff fddb 	bl	8003006 <__lo0bits>
 8003450:	2101      	movs	r1, #1
 8003452:	9b01      	ldr	r3, [sp, #4]
 8003454:	6139      	str	r1, [r7, #16]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	3020      	adds	r0, #32
 800345a:	e7e5      	b.n	8003428 <__d2b+0x54>
 800345c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003460:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	6918      	ldr	r0, [r3, #16]
 8003468:	f7ff fdae 	bl	8002fc8 <__hi0bits>
 800346c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003470:	e7e1      	b.n	8003436 <__d2b+0x62>
	...

08003474 <_mprec_log10>:
 8003474:	2817      	cmp	r0, #23
 8003476:	b5d0      	push	{r4, r6, r7, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	dc05      	bgt.n	8003488 <_mprec_log10+0x14>
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <_mprec_log10+0x2c>)
 800347e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8003482:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003486:	bdd0      	pop	{r4, r6, r7, pc}
 8003488:	2000      	movs	r0, #0
 800348a:	2600      	movs	r6, #0
 800348c:	4905      	ldr	r1, [pc, #20]	; (80034a4 <_mprec_log10+0x30>)
 800348e:	4f06      	ldr	r7, [pc, #24]	; (80034a8 <_mprec_log10+0x34>)
 8003490:	4632      	mov	r2, r6
 8003492:	463b      	mov	r3, r7
 8003494:	f7fd f818 	bl	80004c8 <__aeabi_dmul>
 8003498:	3c01      	subs	r4, #1
 800349a:	d1f9      	bne.n	8003490 <_mprec_log10+0x1c>
 800349c:	e7f3      	b.n	8003486 <_mprec_log10+0x12>
 800349e:	bf00      	nop
 80034a0:	080042d8 	.word	0x080042d8
 80034a4:	3ff00000 	.word	0x3ff00000
 80034a8:	40240000 	.word	0x40240000

080034ac <_calloc_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	fb02 f401 	mul.w	r4, r2, r1
 80034b2:	4621      	mov	r1, r4
 80034b4:	f000 f808 	bl	80034c8 <_malloc_r>
 80034b8:	4605      	mov	r5, r0
 80034ba:	b118      	cbz	r0, 80034c4 <_calloc_r+0x18>
 80034bc:	4622      	mov	r2, r4
 80034be:	2100      	movs	r1, #0
 80034c0:	f7ff fbb0 	bl	8002c24 <memset>
 80034c4:	4628      	mov	r0, r5
 80034c6:	bd38      	pop	{r3, r4, r5, pc}

080034c8 <_malloc_r>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	1ccd      	adds	r5, r1, #3
 80034cc:	f025 0503 	bic.w	r5, r5, #3
 80034d0:	3508      	adds	r5, #8
 80034d2:	2d0c      	cmp	r5, #12
 80034d4:	bf38      	it	cc
 80034d6:	250c      	movcc	r5, #12
 80034d8:	2d00      	cmp	r5, #0
 80034da:	4606      	mov	r6, r0
 80034dc:	db01      	blt.n	80034e2 <_malloc_r+0x1a>
 80034de:	42a9      	cmp	r1, r5
 80034e0:	d903      	bls.n	80034ea <_malloc_r+0x22>
 80034e2:	230c      	movs	r3, #12
 80034e4:	6033      	str	r3, [r6, #0]
 80034e6:	2000      	movs	r0, #0
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	f000 feb4 	bl	8004256 <__malloc_lock>
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <_malloc_r+0xac>)
 80034f0:	6814      	ldr	r4, [r2, #0]
 80034f2:	4621      	mov	r1, r4
 80034f4:	b991      	cbnz	r1, 800351c <_malloc_r+0x54>
 80034f6:	4c20      	ldr	r4, [pc, #128]	; (8003578 <_malloc_r+0xb0>)
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	b91b      	cbnz	r3, 8003504 <_malloc_r+0x3c>
 80034fc:	4630      	mov	r0, r6
 80034fe:	f000 f83d 	bl	800357c <_sbrk_r>
 8003502:	6020      	str	r0, [r4, #0]
 8003504:	4629      	mov	r1, r5
 8003506:	4630      	mov	r0, r6
 8003508:	f000 f838 	bl	800357c <_sbrk_r>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d124      	bne.n	800355a <_malloc_r+0x92>
 8003510:	230c      	movs	r3, #12
 8003512:	4630      	mov	r0, r6
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	f000 fe9f 	bl	8004258 <__malloc_unlock>
 800351a:	e7e4      	b.n	80034e6 <_malloc_r+0x1e>
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	1b5b      	subs	r3, r3, r5
 8003520:	d418      	bmi.n	8003554 <_malloc_r+0x8c>
 8003522:	2b0b      	cmp	r3, #11
 8003524:	d90f      	bls.n	8003546 <_malloc_r+0x7e>
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	18cc      	adds	r4, r1, r3
 800352a:	50cd      	str	r5, [r1, r3]
 800352c:	4630      	mov	r0, r6
 800352e:	f000 fe93 	bl	8004258 <__malloc_unlock>
 8003532:	f104 000b 	add.w	r0, r4, #11
 8003536:	1d23      	adds	r3, r4, #4
 8003538:	f020 0007 	bic.w	r0, r0, #7
 800353c:	1ac3      	subs	r3, r0, r3
 800353e:	d0d3      	beq.n	80034e8 <_malloc_r+0x20>
 8003540:	425a      	negs	r2, r3
 8003542:	50e2      	str	r2, [r4, r3]
 8003544:	e7d0      	b.n	80034e8 <_malloc_r+0x20>
 8003546:	684b      	ldr	r3, [r1, #4]
 8003548:	428c      	cmp	r4, r1
 800354a:	bf16      	itet	ne
 800354c:	6063      	strne	r3, [r4, #4]
 800354e:	6013      	streq	r3, [r2, #0]
 8003550:	460c      	movne	r4, r1
 8003552:	e7eb      	b.n	800352c <_malloc_r+0x64>
 8003554:	460c      	mov	r4, r1
 8003556:	6849      	ldr	r1, [r1, #4]
 8003558:	e7cc      	b.n	80034f4 <_malloc_r+0x2c>
 800355a:	1cc4      	adds	r4, r0, #3
 800355c:	f024 0403 	bic.w	r4, r4, #3
 8003560:	42a0      	cmp	r0, r4
 8003562:	d005      	beq.n	8003570 <_malloc_r+0xa8>
 8003564:	1a21      	subs	r1, r4, r0
 8003566:	4630      	mov	r0, r6
 8003568:	f000 f808 	bl	800357c <_sbrk_r>
 800356c:	3001      	adds	r0, #1
 800356e:	d0cf      	beq.n	8003510 <_malloc_r+0x48>
 8003570:	6025      	str	r5, [r4, #0]
 8003572:	e7db      	b.n	800352c <_malloc_r+0x64>
 8003574:	20000090 	.word	0x20000090
 8003578:	20000094 	.word	0x20000094

0800357c <_sbrk_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	2300      	movs	r3, #0
 8003580:	4c05      	ldr	r4, [pc, #20]	; (8003598 <_sbrk_r+0x1c>)
 8003582:	4605      	mov	r5, r0
 8003584:	4608      	mov	r0, r1
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	f7fd fe2e 	bl	80011e8 <_sbrk>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_sbrk_r+0x1a>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	b103      	cbz	r3, 8003596 <_sbrk_r+0x1a>
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	200001c4 	.word	0x200001c4

0800359c <strcpy>:
 800359c:	4603      	mov	r3, r0
 800359e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035a2:	f803 2b01 	strb.w	r2, [r3], #1
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	d1f9      	bne.n	800359e <strcpy+0x2>
 80035aa:	4770      	bx	lr

080035ac <quorem>:
 80035ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	6903      	ldr	r3, [r0, #16]
 80035b2:	690c      	ldr	r4, [r1, #16]
 80035b4:	4680      	mov	r8, r0
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	f2c0 8084 	blt.w	80036c4 <quorem+0x118>
 80035bc:	3c01      	subs	r4, #1
 80035be:	f101 0714 	add.w	r7, r1, #20
 80035c2:	f100 0614 	add.w	r6, r0, #20
 80035c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80035ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80035ce:	3501      	adds	r5, #1
 80035d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80035d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80035d8:	eb06 030c 	add.w	r3, r6, ip
 80035dc:	eb07 090c 	add.w	r9, r7, ip
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	b39d      	cbz	r5, 800364c <quorem+0xa0>
 80035e4:	f04f 0a00 	mov.w	sl, #0
 80035e8:	4638      	mov	r0, r7
 80035ea:	46b6      	mov	lr, r6
 80035ec:	46d3      	mov	fp, sl
 80035ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80035f2:	b293      	uxth	r3, r2
 80035f4:	fb05 a303 	mla	r3, r5, r3, sl
 80035f8:	0c12      	lsrs	r2, r2, #16
 80035fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035fe:	fb05 a202 	mla	r2, r5, r2, sl
 8003602:	b29b      	uxth	r3, r3
 8003604:	ebab 0303 	sub.w	r3, fp, r3
 8003608:	f8de b000 	ldr.w	fp, [lr]
 800360c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003610:	fa1f fb8b 	uxth.w	fp, fp
 8003614:	445b      	add	r3, fp
 8003616:	fa1f fb82 	uxth.w	fp, r2
 800361a:	f8de 2000 	ldr.w	r2, [lr]
 800361e:	4581      	cmp	r9, r0
 8003620:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003628:	b29b      	uxth	r3, r3
 800362a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800362e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003632:	f84e 3b04 	str.w	r3, [lr], #4
 8003636:	d2da      	bcs.n	80035ee <quorem+0x42>
 8003638:	f856 300c 	ldr.w	r3, [r6, ip]
 800363c:	b933      	cbnz	r3, 800364c <quorem+0xa0>
 800363e:	9b01      	ldr	r3, [sp, #4]
 8003640:	3b04      	subs	r3, #4
 8003642:	429e      	cmp	r6, r3
 8003644:	461a      	mov	r2, r3
 8003646:	d331      	bcc.n	80036ac <quorem+0x100>
 8003648:	f8c8 4010 	str.w	r4, [r8, #16]
 800364c:	4640      	mov	r0, r8
 800364e:	f7ff fe49 	bl	80032e4 <__mcmp>
 8003652:	2800      	cmp	r0, #0
 8003654:	db26      	blt.n	80036a4 <quorem+0xf8>
 8003656:	4630      	mov	r0, r6
 8003658:	f04f 0c00 	mov.w	ip, #0
 800365c:	3501      	adds	r5, #1
 800365e:	f857 1b04 	ldr.w	r1, [r7], #4
 8003662:	f8d0 e000 	ldr.w	lr, [r0]
 8003666:	b28b      	uxth	r3, r1
 8003668:	ebac 0303 	sub.w	r3, ip, r3
 800366c:	fa1f f28e 	uxth.w	r2, lr
 8003670:	4413      	add	r3, r2
 8003672:	0c0a      	lsrs	r2, r1, #16
 8003674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800367c:	b29b      	uxth	r3, r3
 800367e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003682:	45b9      	cmp	r9, r7
 8003684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003688:	f840 3b04 	str.w	r3, [r0], #4
 800368c:	d2e7      	bcs.n	800365e <quorem+0xb2>
 800368e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003692:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003696:	b92a      	cbnz	r2, 80036a4 <quorem+0xf8>
 8003698:	3b04      	subs	r3, #4
 800369a:	429e      	cmp	r6, r3
 800369c:	461a      	mov	r2, r3
 800369e:	d30b      	bcc.n	80036b8 <quorem+0x10c>
 80036a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80036a4:	4628      	mov	r0, r5
 80036a6:	b003      	add	sp, #12
 80036a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	3b04      	subs	r3, #4
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	d1c9      	bne.n	8003648 <quorem+0x9c>
 80036b4:	3c01      	subs	r4, #1
 80036b6:	e7c4      	b.n	8003642 <quorem+0x96>
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	3b04      	subs	r3, #4
 80036bc:	2a00      	cmp	r2, #0
 80036be:	d1ef      	bne.n	80036a0 <quorem+0xf4>
 80036c0:	3c01      	subs	r4, #1
 80036c2:	e7ea      	b.n	800369a <quorem+0xee>
 80036c4:	2000      	movs	r0, #0
 80036c6:	e7ee      	b.n	80036a6 <quorem+0xfa>

080036c8 <_dtoa_r>:
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	4616      	mov	r6, r2
 80036ce:	461f      	mov	r7, r3
 80036d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036d2:	b095      	sub	sp, #84	; 0x54
 80036d4:	4604      	mov	r4, r0
 80036d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80036da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80036de:	b93d      	cbnz	r5, 80036f0 <_dtoa_r+0x28>
 80036e0:	2010      	movs	r0, #16
 80036e2:	f000 fda5 	bl	8004230 <malloc>
 80036e6:	6260      	str	r0, [r4, #36]	; 0x24
 80036e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80036ec:	6005      	str	r5, [r0, #0]
 80036ee:	60c5      	str	r5, [r0, #12]
 80036f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	b151      	cbz	r1, 800370c <_dtoa_r+0x44>
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	2301      	movs	r3, #1
 80036fa:	4093      	lsls	r3, r2
 80036fc:	604a      	str	r2, [r1, #4]
 80036fe:	608b      	str	r3, [r1, #8]
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff fc0f 	bl	8002f24 <_Bfree>
 8003706:	2200      	movs	r2, #0
 8003708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	1e3b      	subs	r3, r7, #0
 800370e:	bfaf      	iteee	ge
 8003710:	2300      	movge	r3, #0
 8003712:	2201      	movlt	r2, #1
 8003714:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003718:	9303      	strlt	r3, [sp, #12]
 800371a:	bfac      	ite	ge
 800371c:	f8c8 3000 	strge.w	r3, [r8]
 8003720:	f8c8 2000 	strlt.w	r2, [r8]
 8003724:	4bae      	ldr	r3, [pc, #696]	; (80039e0 <_dtoa_r+0x318>)
 8003726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800372a:	ea33 0308 	bics.w	r3, r3, r8
 800372e:	d11b      	bne.n	8003768 <_dtoa_r+0xa0>
 8003730:	f242 730f 	movw	r3, #9999	; 0x270f
 8003734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	9b02      	ldr	r3, [sp, #8]
 800373a:	b923      	cbnz	r3, 8003746 <_dtoa_r+0x7e>
 800373c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003740:	2800      	cmp	r0, #0
 8003742:	f000 8545 	beq.w	80041d0 <_dtoa_r+0xb08>
 8003746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003748:	b953      	cbnz	r3, 8003760 <_dtoa_r+0x98>
 800374a:	4ba6      	ldr	r3, [pc, #664]	; (80039e4 <_dtoa_r+0x31c>)
 800374c:	e021      	b.n	8003792 <_dtoa_r+0xca>
 800374e:	4ba6      	ldr	r3, [pc, #664]	; (80039e8 <_dtoa_r+0x320>)
 8003750:	9306      	str	r3, [sp, #24]
 8003752:	3308      	adds	r3, #8
 8003754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	9806      	ldr	r0, [sp, #24]
 800375a:	b015      	add	sp, #84	; 0x54
 800375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003760:	4ba0      	ldr	r3, [pc, #640]	; (80039e4 <_dtoa_r+0x31c>)
 8003762:	9306      	str	r3, [sp, #24]
 8003764:	3303      	adds	r3, #3
 8003766:	e7f5      	b.n	8003754 <_dtoa_r+0x8c>
 8003768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	2300      	movs	r3, #0
 8003770:	4630      	mov	r0, r6
 8003772:	4639      	mov	r1, r7
 8003774:	f7fd f910 	bl	8000998 <__aeabi_dcmpeq>
 8003778:	4682      	mov	sl, r0
 800377a:	b160      	cbz	r0, 8003796 <_dtoa_r+0xce>
 800377c:	2301      	movs	r3, #1
 800377e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8520 	beq.w	80041ca <_dtoa_r+0xb02>
 800378a:	4b98      	ldr	r3, [pc, #608]	; (80039ec <_dtoa_r+0x324>)
 800378c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	3b01      	subs	r3, #1
 8003792:	9306      	str	r3, [sp, #24]
 8003794:	e7e0      	b.n	8003758 <_dtoa_r+0x90>
 8003796:	ab12      	add	r3, sp, #72	; 0x48
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	ab13      	add	r3, sp, #76	; 0x4c
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4632      	mov	r2, r6
 80037a0:	463b      	mov	r3, r7
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff fe16 	bl	80033d4 <__d2b>
 80037a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80037ac:	4683      	mov	fp, r0
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	d07d      	beq.n	80038ae <_dtoa_r+0x1e6>
 80037b2:	46b0      	mov	r8, r6
 80037b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80037b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80037bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80037c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80037c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b89      	ldr	r3, [pc, #548]	; (80039f0 <_dtoa_r+0x328>)
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fc fcc2 	bl	8000158 <__aeabi_dsub>
 80037d4:	a37c      	add	r3, pc, #496	; (adr r3, 80039c8 <_dtoa_r+0x300>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc fe75 	bl	80004c8 <__aeabi_dmul>
 80037de:	a37c      	add	r3, pc, #496	; (adr r3, 80039d0 <_dtoa_r+0x308>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f7fc fcba 	bl	800015c <__adddf3>
 80037e8:	4606      	mov	r6, r0
 80037ea:	4628      	mov	r0, r5
 80037ec:	460f      	mov	r7, r1
 80037ee:	f7fc fe01 	bl	80003f4 <__aeabi_i2d>
 80037f2:	a379      	add	r3, pc, #484	; (adr r3, 80039d8 <_dtoa_r+0x310>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fc fe66 	bl	80004c8 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4630      	mov	r0, r6
 8003802:	4639      	mov	r1, r7
 8003804:	f7fc fcaa 	bl	800015c <__adddf3>
 8003808:	4606      	mov	r6, r0
 800380a:	460f      	mov	r7, r1
 800380c:	f7fd f8f6 	bl	80009fc <__aeabi_d2iz>
 8003810:	2200      	movs	r2, #0
 8003812:	4682      	mov	sl, r0
 8003814:	2300      	movs	r3, #0
 8003816:	4630      	mov	r0, r6
 8003818:	4639      	mov	r1, r7
 800381a:	f7fd f8c7 	bl	80009ac <__aeabi_dcmplt>
 800381e:	b148      	cbz	r0, 8003834 <_dtoa_r+0x16c>
 8003820:	4650      	mov	r0, sl
 8003822:	f7fc fde7 	bl	80003f4 <__aeabi_i2d>
 8003826:	4632      	mov	r2, r6
 8003828:	463b      	mov	r3, r7
 800382a:	f7fd f8b5 	bl	8000998 <__aeabi_dcmpeq>
 800382e:	b908      	cbnz	r0, 8003834 <_dtoa_r+0x16c>
 8003830:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003834:	f1ba 0f16 	cmp.w	sl, #22
 8003838:	d85a      	bhi.n	80038f0 <_dtoa_r+0x228>
 800383a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800383e:	496d      	ldr	r1, [pc, #436]	; (80039f4 <_dtoa_r+0x32c>)
 8003840:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003848:	f7fd f8ce 	bl	80009e8 <__aeabi_dcmpgt>
 800384c:	2800      	cmp	r0, #0
 800384e:	d051      	beq.n	80038f4 <_dtoa_r+0x22c>
 8003850:	2300      	movs	r3, #0
 8003852:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003856:	930d      	str	r3, [sp, #52]	; 0x34
 8003858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800385a:	1b5d      	subs	r5, r3, r5
 800385c:	1e6b      	subs	r3, r5, #1
 800385e:	9307      	str	r3, [sp, #28]
 8003860:	bf43      	ittte	mi
 8003862:	2300      	movmi	r3, #0
 8003864:	f1c5 0901 	rsbmi	r9, r5, #1
 8003868:	9307      	strmi	r3, [sp, #28]
 800386a:	f04f 0900 	movpl.w	r9, #0
 800386e:	f1ba 0f00 	cmp.w	sl, #0
 8003872:	db41      	blt.n	80038f8 <_dtoa_r+0x230>
 8003874:	9b07      	ldr	r3, [sp, #28]
 8003876:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800387a:	4453      	add	r3, sl
 800387c:	9307      	str	r3, [sp, #28]
 800387e:	2300      	movs	r3, #0
 8003880:	9308      	str	r3, [sp, #32]
 8003882:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003884:	2b09      	cmp	r3, #9
 8003886:	f200 808f 	bhi.w	80039a8 <_dtoa_r+0x2e0>
 800388a:	2b05      	cmp	r3, #5
 800388c:	bfc4      	itt	gt
 800388e:	3b04      	subgt	r3, #4
 8003890:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003894:	bfc8      	it	gt
 8003896:	2500      	movgt	r5, #0
 8003898:	f1a3 0302 	sub.w	r3, r3, #2
 800389c:	bfd8      	it	le
 800389e:	2501      	movle	r5, #1
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	f200 808d 	bhi.w	80039c0 <_dtoa_r+0x2f8>
 80038a6:	e8df f003 	tbb	[pc, r3]
 80038aa:	7d7b      	.short	0x7d7b
 80038ac:	6f2f      	.short	0x6f2f
 80038ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80038b2:	441d      	add	r5, r3
 80038b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80038b8:	2820      	cmp	r0, #32
 80038ba:	dd13      	ble.n	80038e4 <_dtoa_r+0x21c>
 80038bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80038c0:	9b02      	ldr	r3, [sp, #8]
 80038c2:	fa08 f800 	lsl.w	r8, r8, r0
 80038c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80038ca:	fa23 f000 	lsr.w	r0, r3, r0
 80038ce:	ea48 0000 	orr.w	r0, r8, r0
 80038d2:	f7fc fd7f 	bl	80003d4 <__aeabi_ui2d>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4680      	mov	r8, r0
 80038da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80038de:	3d01      	subs	r5, #1
 80038e0:	9310      	str	r3, [sp, #64]	; 0x40
 80038e2:	e771      	b.n	80037c8 <_dtoa_r+0x100>
 80038e4:	9b02      	ldr	r3, [sp, #8]
 80038e6:	f1c0 0020 	rsb	r0, r0, #32
 80038ea:	fa03 f000 	lsl.w	r0, r3, r0
 80038ee:	e7f0      	b.n	80038d2 <_dtoa_r+0x20a>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e7b0      	b.n	8003856 <_dtoa_r+0x18e>
 80038f4:	900d      	str	r0, [sp, #52]	; 0x34
 80038f6:	e7af      	b.n	8003858 <_dtoa_r+0x190>
 80038f8:	f1ca 0300 	rsb	r3, sl, #0
 80038fc:	9308      	str	r3, [sp, #32]
 80038fe:	2300      	movs	r3, #0
 8003900:	eba9 090a 	sub.w	r9, r9, sl
 8003904:	930c      	str	r3, [sp, #48]	; 0x30
 8003906:	e7bc      	b.n	8003882 <_dtoa_r+0x1ba>
 8003908:	2301      	movs	r3, #1
 800390a:	9309      	str	r3, [sp, #36]	; 0x24
 800390c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800390e:	2b00      	cmp	r3, #0
 8003910:	dd74      	ble.n	80039fc <_dtoa_r+0x334>
 8003912:	4698      	mov	r8, r3
 8003914:	9304      	str	r3, [sp, #16]
 8003916:	2200      	movs	r2, #0
 8003918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800391a:	6072      	str	r2, [r6, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	f102 0014 	add.w	r0, r2, #20
 8003922:	4298      	cmp	r0, r3
 8003924:	6871      	ldr	r1, [r6, #4]
 8003926:	d96e      	bls.n	8003a06 <_dtoa_r+0x33e>
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fac7 	bl	8002ebc <_Balloc>
 800392e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003930:	6030      	str	r0, [r6, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b8 0f0e 	cmp.w	r8, #14
 8003938:	9306      	str	r3, [sp, #24]
 800393a:	f200 80ed 	bhi.w	8003b18 <_dtoa_r+0x450>
 800393e:	2d00      	cmp	r5, #0
 8003940:	f000 80ea 	beq.w	8003b18 <_dtoa_r+0x450>
 8003944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003948:	f1ba 0f00 	cmp.w	sl, #0
 800394c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003950:	dd77      	ble.n	8003a42 <_dtoa_r+0x37a>
 8003952:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <_dtoa_r+0x32c>)
 8003954:	f00a 030f 	and.w	r3, sl, #15
 8003958:	ea4f 162a 	mov.w	r6, sl, asr #4
 800395c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003960:	06f0      	lsls	r0, r6, #27
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800396a:	d568      	bpl.n	8003a3e <_dtoa_r+0x376>
 800396c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <_dtoa_r+0x330>)
 8003972:	2503      	movs	r5, #3
 8003974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003978:	f7fc fed0 	bl	800071c <__aeabi_ddiv>
 800397c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003980:	f006 060f 	and.w	r6, r6, #15
 8003984:	4f1c      	ldr	r7, [pc, #112]	; (80039f8 <_dtoa_r+0x330>)
 8003986:	e04f      	b.n	8003a28 <_dtoa_r+0x360>
 8003988:	2301      	movs	r3, #1
 800398a:	9309      	str	r3, [sp, #36]	; 0x24
 800398c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800398e:	4453      	add	r3, sl
 8003990:	f103 0801 	add.w	r8, r3, #1
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	4643      	mov	r3, r8
 8003998:	2b01      	cmp	r3, #1
 800399a:	bfb8      	it	lt
 800399c:	2301      	movlt	r3, #1
 800399e:	e7ba      	b.n	8003916 <_dtoa_r+0x24e>
 80039a0:	2300      	movs	r3, #0
 80039a2:	e7b2      	b.n	800390a <_dtoa_r+0x242>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e7f0      	b.n	800398a <_dtoa_r+0x2c2>
 80039a8:	2501      	movs	r5, #1
 80039aa:	2300      	movs	r3, #0
 80039ac:	9509      	str	r5, [sp, #36]	; 0x24
 80039ae:	931e      	str	r3, [sp, #120]	; 0x78
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b4:	2200      	movs	r2, #0
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	4698      	mov	r8, r3
 80039ba:	2312      	movs	r3, #18
 80039bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80039be:	e7aa      	b.n	8003916 <_dtoa_r+0x24e>
 80039c0:	2301      	movs	r3, #1
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	e7f4      	b.n	80039b0 <_dtoa_r+0x2e8>
 80039c6:	bf00      	nop
 80039c8:	636f4361 	.word	0x636f4361
 80039cc:	3fd287a7 	.word	0x3fd287a7
 80039d0:	8b60c8b3 	.word	0x8b60c8b3
 80039d4:	3fc68a28 	.word	0x3fc68a28
 80039d8:	509f79fb 	.word	0x509f79fb
 80039dc:	3fd34413 	.word	0x3fd34413
 80039e0:	7ff00000 	.word	0x7ff00000
 80039e4:	080043b5 	.word	0x080043b5
 80039e8:	080043ac 	.word	0x080043ac
 80039ec:	080043ba 	.word	0x080043ba
 80039f0:	3ff80000 	.word	0x3ff80000
 80039f4:	080042d8 	.word	0x080042d8
 80039f8:	080042b0 	.word	0x080042b0
 80039fc:	2301      	movs	r3, #1
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	4698      	mov	r8, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	e7da      	b.n	80039bc <_dtoa_r+0x2f4>
 8003a06:	3101      	adds	r1, #1
 8003a08:	6071      	str	r1, [r6, #4]
 8003a0a:	0052      	lsls	r2, r2, #1
 8003a0c:	e787      	b.n	800391e <_dtoa_r+0x256>
 8003a0e:	07f1      	lsls	r1, r6, #31
 8003a10:	d508      	bpl.n	8003a24 <_dtoa_r+0x35c>
 8003a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1a:	f7fc fd55 	bl	80004c8 <__aeabi_dmul>
 8003a1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a22:	3501      	adds	r5, #1
 8003a24:	1076      	asrs	r6, r6, #1
 8003a26:	3708      	adds	r7, #8
 8003a28:	2e00      	cmp	r6, #0
 8003a2a:	d1f0      	bne.n	8003a0e <_dtoa_r+0x346>
 8003a2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a34:	f7fc fe72 	bl	800071c <__aeabi_ddiv>
 8003a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a3c:	e01b      	b.n	8003a76 <_dtoa_r+0x3ae>
 8003a3e:	2502      	movs	r5, #2
 8003a40:	e7a0      	b.n	8003984 <_dtoa_r+0x2bc>
 8003a42:	f000 80a4 	beq.w	8003b8e <_dtoa_r+0x4c6>
 8003a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a4a:	f1ca 0600 	rsb	r6, sl, #0
 8003a4e:	4ba0      	ldr	r3, [pc, #640]	; (8003cd0 <_dtoa_r+0x608>)
 8003a50:	f006 020f 	and.w	r2, r6, #15
 8003a54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fd34 	bl	80004c8 <__aeabi_dmul>
 8003a60:	2502      	movs	r5, #2
 8003a62:	2300      	movs	r3, #0
 8003a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a68:	4f9a      	ldr	r7, [pc, #616]	; (8003cd4 <_dtoa_r+0x60c>)
 8003a6a:	1136      	asrs	r6, r6, #4
 8003a6c:	2e00      	cmp	r6, #0
 8003a6e:	f040 8083 	bne.w	8003b78 <_dtoa_r+0x4b0>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e0      	bne.n	8003a38 <_dtoa_r+0x370>
 8003a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 808a 	beq.w	8003b92 <_dtoa_r+0x4ca>
 8003a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <_dtoa_r+0x610>)
 8003a8e:	f7fc ff8d 	bl	80009ac <__aeabi_dcmplt>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d07d      	beq.n	8003b92 <_dtoa_r+0x4ca>
 8003a96:	f1b8 0f00 	cmp.w	r8, #0
 8003a9a:	d07a      	beq.n	8003b92 <_dtoa_r+0x4ca>
 8003a9c:	9b04      	ldr	r3, [sp, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	dd36      	ble.n	8003b10 <_dtoa_r+0x448>
 8003aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <_dtoa_r+0x614>)
 8003aaa:	f7fc fd0d 	bl	80004c8 <__aeabi_dmul>
 8003aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ab2:	9e04      	ldr	r6, [sp, #16]
 8003ab4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8003ab8:	3501      	adds	r5, #1
 8003aba:	4628      	mov	r0, r5
 8003abc:	f7fc fc9a 	bl	80003f4 <__aeabi_i2d>
 8003ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ac4:	f7fc fd00 	bl	80004c8 <__aeabi_dmul>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4b85      	ldr	r3, [pc, #532]	; (8003ce0 <_dtoa_r+0x618>)
 8003acc:	f7fc fb46 	bl	800015c <__adddf3>
 8003ad0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003ad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ad8:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ada:	2e00      	cmp	r6, #0
 8003adc:	d15c      	bne.n	8003b98 <_dtoa_r+0x4d0>
 8003ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <_dtoa_r+0x61c>)
 8003ae6:	f7fc fb37 	bl	8000158 <__aeabi_dsub>
 8003aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aec:	462b      	mov	r3, r5
 8003aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003af2:	f7fc ff79 	bl	80009e8 <__aeabi_dcmpgt>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	f040 8281 	bne.w	8003ffe <_dtoa_r+0x936>
 8003afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003b06:	f7fc ff51 	bl	80009ac <__aeabi_dcmplt>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f040 8275 	bne.w	8003ffa <_dtoa_r+0x932>
 8003b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f2c0 814b 	blt.w	8003db6 <_dtoa_r+0x6ee>
 8003b20:	f1ba 0f0e 	cmp.w	sl, #14
 8003b24:	f300 8147 	bgt.w	8003db6 <_dtoa_r+0x6ee>
 8003b28:	4b69      	ldr	r3, [pc, #420]	; (8003cd0 <_dtoa_r+0x608>)
 8003b2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f280 80d7 	bge.w	8003cec <_dtoa_r+0x624>
 8003b3e:	f1b8 0f00 	cmp.w	r8, #0
 8003b42:	f300 80d3 	bgt.w	8003cec <_dtoa_r+0x624>
 8003b46:	f040 8257 	bne.w	8003ff8 <_dtoa_r+0x930>
 8003b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <_dtoa_r+0x61c>)
 8003b52:	f7fc fcb9 	bl	80004c8 <__aeabi_dmul>
 8003b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b5a:	f7fc ff3b 	bl	80009d4 <__aeabi_dcmpge>
 8003b5e:	4646      	mov	r6, r8
 8003b60:	4647      	mov	r7, r8
 8003b62:	2800      	cmp	r0, #0
 8003b64:	f040 822d 	bne.w	8003fc2 <_dtoa_r+0x8fa>
 8003b68:	9b06      	ldr	r3, [sp, #24]
 8003b6a:	9a06      	ldr	r2, [sp, #24]
 8003b6c:	1c5d      	adds	r5, r3, #1
 8003b6e:	2331      	movs	r3, #49	; 0x31
 8003b70:	f10a 0a01 	add.w	sl, sl, #1
 8003b74:	7013      	strb	r3, [r2, #0]
 8003b76:	e228      	b.n	8003fca <_dtoa_r+0x902>
 8003b78:	07f2      	lsls	r2, r6, #31
 8003b7a:	d505      	bpl.n	8003b88 <_dtoa_r+0x4c0>
 8003b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b80:	f7fc fca2 	bl	80004c8 <__aeabi_dmul>
 8003b84:	2301      	movs	r3, #1
 8003b86:	3501      	adds	r5, #1
 8003b88:	1076      	asrs	r6, r6, #1
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	e76e      	b.n	8003a6c <_dtoa_r+0x3a4>
 8003b8e:	2502      	movs	r5, #2
 8003b90:	e771      	b.n	8003a76 <_dtoa_r+0x3ae>
 8003b92:	4657      	mov	r7, sl
 8003b94:	4646      	mov	r6, r8
 8003b96:	e790      	b.n	8003aba <_dtoa_r+0x3f2>
 8003b98:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <_dtoa_r+0x608>)
 8003b9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d048      	beq.n	8003c3a <_dtoa_r+0x572>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	2000      	movs	r0, #0
 8003bae:	494e      	ldr	r1, [pc, #312]	; (8003ce8 <_dtoa_r+0x620>)
 8003bb0:	f7fc fdb4 	bl	800071c <__aeabi_ddiv>
 8003bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003bb8:	f7fc face 	bl	8000158 <__aeabi_dsub>
 8003bbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bc0:	9d06      	ldr	r5, [sp, #24]
 8003bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bc6:	f7fc ff19 	bl	80009fc <__aeabi_d2iz>
 8003bca:	9011      	str	r0, [sp, #68]	; 0x44
 8003bcc:	f7fc fc12 	bl	80003f4 <__aeabi_i2d>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bd8:	f7fc fabe 	bl	8000158 <__aeabi_dsub>
 8003bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003be2:	3330      	adds	r3, #48	; 0x30
 8003be4:	f805 3b01 	strb.w	r3, [r5], #1
 8003be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003bec:	f7fc fede 	bl	80009ac <__aeabi_dcmplt>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d163      	bne.n	8003cbc <_dtoa_r+0x5f4>
 8003bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	4937      	ldr	r1, [pc, #220]	; (8003cd8 <_dtoa_r+0x610>)
 8003bfc:	f7fc faac 	bl	8000158 <__aeabi_dsub>
 8003c00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c04:	f7fc fed2 	bl	80009ac <__aeabi_dcmplt>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f040 80b5 	bne.w	8003d78 <_dtoa_r+0x6b0>
 8003c0e:	9b06      	ldr	r3, [sp, #24]
 8003c10:	1aeb      	subs	r3, r5, r3
 8003c12:	429e      	cmp	r6, r3
 8003c14:	f77f af7c 	ble.w	8003b10 <_dtoa_r+0x448>
 8003c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <_dtoa_r+0x614>)
 8003c20:	f7fc fc52 	bl	80004c8 <__aeabi_dmul>
 8003c24:	2200      	movs	r2, #0
 8003c26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <_dtoa_r+0x614>)
 8003c30:	f7fc fc4a 	bl	80004c8 <__aeabi_dmul>
 8003c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c38:	e7c3      	b.n	8003bc2 <_dtoa_r+0x4fa>
 8003c3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c3e:	f7fc fc43 	bl	80004c8 <__aeabi_dmul>
 8003c42:	9b06      	ldr	r3, [sp, #24]
 8003c44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c48:	199d      	adds	r5, r3, r6
 8003c4a:	461e      	mov	r6, r3
 8003c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c50:	f7fc fed4 	bl	80009fc <__aeabi_d2iz>
 8003c54:	9011      	str	r0, [sp, #68]	; 0x44
 8003c56:	f7fc fbcd 	bl	80003f4 <__aeabi_i2d>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c62:	f7fc fa79 	bl	8000158 <__aeabi_dsub>
 8003c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c6c:	3330      	adds	r3, #48	; 0x30
 8003c6e:	f806 3b01 	strb.w	r3, [r6], #1
 8003c72:	42ae      	cmp	r6, r5
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	d124      	bne.n	8003cc4 <_dtoa_r+0x5fc>
 8003c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <_dtoa_r+0x620>)
 8003c80:	f7fc fa6c 	bl	800015c <__adddf3>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c8c:	f7fc feac 	bl	80009e8 <__aeabi_dcmpgt>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d171      	bne.n	8003d78 <_dtoa_r+0x6b0>
 8003c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c98:	2000      	movs	r0, #0
 8003c9a:	4913      	ldr	r1, [pc, #76]	; (8003ce8 <_dtoa_r+0x620>)
 8003c9c:	f7fc fa5c 	bl	8000158 <__aeabi_dsub>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ca8:	f7fc fe80 	bl	80009ac <__aeabi_dcmplt>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f43f af2f 	beq.w	8003b10 <_dtoa_r+0x448>
 8003cb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cb6:	1e6a      	subs	r2, r5, #1
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d001      	beq.n	8003cc0 <_dtoa_r+0x5f8>
 8003cbc:	46ba      	mov	sl, r7
 8003cbe:	e04a      	b.n	8003d56 <_dtoa_r+0x68e>
 8003cc0:	4615      	mov	r5, r2
 8003cc2:	e7f6      	b.n	8003cb2 <_dtoa_r+0x5ea>
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <_dtoa_r+0x614>)
 8003cc6:	f7fc fbff 	bl	80004c8 <__aeabi_dmul>
 8003cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cce:	e7bd      	b.n	8003c4c <_dtoa_r+0x584>
 8003cd0:	080042d8 	.word	0x080042d8
 8003cd4:	080042b0 	.word	0x080042b0
 8003cd8:	3ff00000 	.word	0x3ff00000
 8003cdc:	40240000 	.word	0x40240000
 8003ce0:	401c0000 	.word	0x401c0000
 8003ce4:	40140000 	.word	0x40140000
 8003ce8:	3fe00000 	.word	0x3fe00000
 8003cec:	9d06      	ldr	r5, [sp, #24]
 8003cee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	f7fc fd0f 	bl	800071c <__aeabi_ddiv>
 8003cfe:	f7fc fe7d 	bl	80009fc <__aeabi_d2iz>
 8003d02:	4681      	mov	r9, r0
 8003d04:	f7fc fb76 	bl	80003f4 <__aeabi_i2d>
 8003d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d0c:	f7fc fbdc 	bl	80004c8 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4630      	mov	r0, r6
 8003d16:	4639      	mov	r1, r7
 8003d18:	f7fc fa1e 	bl	8000158 <__aeabi_dsub>
 8003d1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003d20:	f805 6b01 	strb.w	r6, [r5], #1
 8003d24:	9e06      	ldr	r6, [sp, #24]
 8003d26:	4602      	mov	r2, r0
 8003d28:	1bae      	subs	r6, r5, r6
 8003d2a:	45b0      	cmp	r8, r6
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	d135      	bne.n	8003d9c <_dtoa_r+0x6d4>
 8003d30:	f7fc fa14 	bl	800015c <__adddf3>
 8003d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d38:	4606      	mov	r6, r0
 8003d3a:	460f      	mov	r7, r1
 8003d3c:	f7fc fe54 	bl	80009e8 <__aeabi_dcmpgt>
 8003d40:	b9c8      	cbnz	r0, 8003d76 <_dtoa_r+0x6ae>
 8003d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d46:	4630      	mov	r0, r6
 8003d48:	4639      	mov	r1, r7
 8003d4a:	f7fc fe25 	bl	8000998 <__aeabi_dcmpeq>
 8003d4e:	b110      	cbz	r0, 8003d56 <_dtoa_r+0x68e>
 8003d50:	f019 0f01 	tst.w	r9, #1
 8003d54:	d10f      	bne.n	8003d76 <_dtoa_r+0x6ae>
 8003d56:	4659      	mov	r1, fp
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff f8e3 	bl	8002f24 <_Bfree>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d62:	702b      	strb	r3, [r5, #0]
 8003d64:	f10a 0301 	add.w	r3, sl, #1
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f43f acf3 	beq.w	8003758 <_dtoa_r+0x90>
 8003d72:	601d      	str	r5, [r3, #0]
 8003d74:	e4f0      	b.n	8003758 <_dtoa_r+0x90>
 8003d76:	4657      	mov	r7, sl
 8003d78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d7c:	1e6b      	subs	r3, r5, #1
 8003d7e:	2a39      	cmp	r2, #57	; 0x39
 8003d80:	d106      	bne.n	8003d90 <_dtoa_r+0x6c8>
 8003d82:	9a06      	ldr	r2, [sp, #24]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <_dtoa_r+0x6d0>
 8003d88:	2330      	movs	r3, #48	; 0x30
 8003d8a:	7013      	strb	r3, [r2, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	3701      	adds	r7, #1
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	3201      	adds	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e791      	b.n	8003cbc <_dtoa_r+0x5f4>
 8003d98:	461d      	mov	r5, r3
 8003d9a:	e7ed      	b.n	8003d78 <_dtoa_r+0x6b0>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4b99      	ldr	r3, [pc, #612]	; (8004004 <_dtoa_r+0x93c>)
 8003da0:	f7fc fb92 	bl	80004c8 <__aeabi_dmul>
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	4606      	mov	r6, r0
 8003daa:	460f      	mov	r7, r1
 8003dac:	f7fc fdf4 	bl	8000998 <__aeabi_dcmpeq>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d09e      	beq.n	8003cf2 <_dtoa_r+0x62a>
 8003db4:	e7cf      	b.n	8003d56 <_dtoa_r+0x68e>
 8003db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	f000 8088 	beq.w	8003ece <_dtoa_r+0x806>
 8003dbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003dc0:	2a01      	cmp	r2, #1
 8003dc2:	dc6d      	bgt.n	8003ea0 <_dtoa_r+0x7d8>
 8003dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	d066      	beq.n	8003e98 <_dtoa_r+0x7d0>
 8003dca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003dce:	464d      	mov	r5, r9
 8003dd0:	9e08      	ldr	r6, [sp, #32]
 8003dd2:	9a07      	ldr	r2, [sp, #28]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	441a      	add	r2, r3
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4499      	add	r9, r3
 8003ddc:	9207      	str	r2, [sp, #28]
 8003dde:	f7ff f941 	bl	8003064 <__i2b>
 8003de2:	4607      	mov	r7, r0
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	dd0b      	ble.n	8003e00 <_dtoa_r+0x738>
 8003de8:	9b07      	ldr	r3, [sp, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dd08      	ble.n	8003e00 <_dtoa_r+0x738>
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	bfa8      	it	ge
 8003df2:	462b      	movge	r3, r5
 8003df4:	9a07      	ldr	r2, [sp, #28]
 8003df6:	eba9 0903 	sub.w	r9, r9, r3
 8003dfa:	1aed      	subs	r5, r5, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	9307      	str	r3, [sp, #28]
 8003e00:	9b08      	ldr	r3, [sp, #32]
 8003e02:	b1eb      	cbz	r3, 8003e40 <_dtoa_r+0x778>
 8003e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d065      	beq.n	8003ed6 <_dtoa_r+0x80e>
 8003e0a:	b18e      	cbz	r6, 8003e30 <_dtoa_r+0x768>
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	4632      	mov	r2, r6
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7ff f9c5 	bl	80031a0 <__pow5mult>
 8003e16:	465a      	mov	r2, fp
 8003e18:	4601      	mov	r1, r0
 8003e1a:	4607      	mov	r7, r0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff f92a 	bl	8003076 <__multiply>
 8003e22:	4659      	mov	r1, fp
 8003e24:	900a      	str	r0, [sp, #40]	; 0x28
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7ff f87c 	bl	8002f24 <_Bfree>
 8003e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e2e:	469b      	mov	fp, r3
 8003e30:	9b08      	ldr	r3, [sp, #32]
 8003e32:	1b9a      	subs	r2, r3, r6
 8003e34:	d004      	beq.n	8003e40 <_dtoa_r+0x778>
 8003e36:	4659      	mov	r1, fp
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff f9b1 	bl	80031a0 <__pow5mult>
 8003e3e:	4683      	mov	fp, r0
 8003e40:	2101      	movs	r1, #1
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7ff f90e 	bl	8003064 <__i2b>
 8003e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 81c6 	beq.w	80041de <_dtoa_r+0xb16>
 8003e52:	461a      	mov	r2, r3
 8003e54:	4601      	mov	r1, r0
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7ff f9a2 	bl	80031a0 <__pow5mult>
 8003e5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e5e:	4606      	mov	r6, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	dc3e      	bgt.n	8003ee2 <_dtoa_r+0x81a>
 8003e64:	9b02      	ldr	r3, [sp, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d137      	bne.n	8003eda <_dtoa_r+0x812>
 8003e6a:	9b03      	ldr	r3, [sp, #12]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d134      	bne.n	8003ede <_dtoa_r+0x816>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e7a:	0d1b      	lsrs	r3, r3, #20
 8003e7c:	051b      	lsls	r3, r3, #20
 8003e7e:	b12b      	cbz	r3, 8003e8c <_dtoa_r+0x7c4>
 8003e80:	9b07      	ldr	r3, [sp, #28]
 8003e82:	f109 0901 	add.w	r9, r9, #1
 8003e86:	3301      	adds	r3, #1
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	9308      	str	r3, [sp, #32]
 8003e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d128      	bne.n	8003ee6 <_dtoa_r+0x81e>
 8003e94:	2001      	movs	r0, #1
 8003e96:	e02e      	b.n	8003ef6 <_dtoa_r+0x82e>
 8003e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e9e:	e796      	b.n	8003dce <_dtoa_r+0x706>
 8003ea0:	9b08      	ldr	r3, [sp, #32]
 8003ea2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003ea6:	42b3      	cmp	r3, r6
 8003ea8:	bfb7      	itett	lt
 8003eaa:	9b08      	ldrlt	r3, [sp, #32]
 8003eac:	1b9e      	subge	r6, r3, r6
 8003eae:	1af2      	sublt	r2, r6, r3
 8003eb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003eb2:	bfbf      	itttt	lt
 8003eb4:	9608      	strlt	r6, [sp, #32]
 8003eb6:	189b      	addlt	r3, r3, r2
 8003eb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003eba:	2600      	movlt	r6, #0
 8003ebc:	f1b8 0f00 	cmp.w	r8, #0
 8003ec0:	bfb9      	ittee	lt
 8003ec2:	eba9 0508 	sublt.w	r5, r9, r8
 8003ec6:	2300      	movlt	r3, #0
 8003ec8:	464d      	movge	r5, r9
 8003eca:	4643      	movge	r3, r8
 8003ecc:	e781      	b.n	8003dd2 <_dtoa_r+0x70a>
 8003ece:	9e08      	ldr	r6, [sp, #32]
 8003ed0:	464d      	mov	r5, r9
 8003ed2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003ed4:	e786      	b.n	8003de4 <_dtoa_r+0x71c>
 8003ed6:	9a08      	ldr	r2, [sp, #32]
 8003ed8:	e7ad      	b.n	8003e36 <_dtoa_r+0x76e>
 8003eda:	2300      	movs	r3, #0
 8003edc:	e7d6      	b.n	8003e8c <_dtoa_r+0x7c4>
 8003ede:	9b02      	ldr	r3, [sp, #8]
 8003ee0:	e7d4      	b.n	8003e8c <_dtoa_r+0x7c4>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9308      	str	r3, [sp, #32]
 8003ee6:	6933      	ldr	r3, [r6, #16]
 8003ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003eec:	6918      	ldr	r0, [r3, #16]
 8003eee:	f7ff f86b 	bl	8002fc8 <__hi0bits>
 8003ef2:	f1c0 0020 	rsb	r0, r0, #32
 8003ef6:	9b07      	ldr	r3, [sp, #28]
 8003ef8:	4418      	add	r0, r3
 8003efa:	f010 001f 	ands.w	r0, r0, #31
 8003efe:	d047      	beq.n	8003f90 <_dtoa_r+0x8c8>
 8003f00:	f1c0 0320 	rsb	r3, r0, #32
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	dd3b      	ble.n	8003f80 <_dtoa_r+0x8b8>
 8003f08:	9b07      	ldr	r3, [sp, #28]
 8003f0a:	f1c0 001c 	rsb	r0, r0, #28
 8003f0e:	4481      	add	r9, r0
 8003f10:	4405      	add	r5, r0
 8003f12:	4403      	add	r3, r0
 8003f14:	9307      	str	r3, [sp, #28]
 8003f16:	f1b9 0f00 	cmp.w	r9, #0
 8003f1a:	dd05      	ble.n	8003f28 <_dtoa_r+0x860>
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	464a      	mov	r2, r9
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff f98b 	bl	800323c <__lshift>
 8003f26:	4683      	mov	fp, r0
 8003f28:	9b07      	ldr	r3, [sp, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	dd05      	ble.n	8003f3a <_dtoa_r+0x872>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	461a      	mov	r2, r3
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff f982 	bl	800323c <__lshift>
 8003f38:	4606      	mov	r6, r0
 8003f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f3c:	b353      	cbz	r3, 8003f94 <_dtoa_r+0x8cc>
 8003f3e:	4631      	mov	r1, r6
 8003f40:	4658      	mov	r0, fp
 8003f42:	f7ff f9cf 	bl	80032e4 <__mcmp>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	da24      	bge.n	8003f94 <_dtoa_r+0x8cc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	220a      	movs	r2, #10
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7fe fffe 	bl	8002f52 <__multadd>
 8003f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003f5c:	4683      	mov	fp, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8144 	beq.w	80041ec <_dtoa_r+0xb24>
 8003f64:	2300      	movs	r3, #0
 8003f66:	4639      	mov	r1, r7
 8003f68:	220a      	movs	r2, #10
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7fe fff1 	bl	8002f52 <__multadd>
 8003f70:	9b04      	ldr	r3, [sp, #16]
 8003f72:	4607      	mov	r7, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dc4d      	bgt.n	8004014 <_dtoa_r+0x94c>
 8003f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	dd4a      	ble.n	8004014 <_dtoa_r+0x94c>
 8003f7e:	e011      	b.n	8003fa4 <_dtoa_r+0x8dc>
 8003f80:	d0c9      	beq.n	8003f16 <_dtoa_r+0x84e>
 8003f82:	9a07      	ldr	r2, [sp, #28]
 8003f84:	331c      	adds	r3, #28
 8003f86:	441a      	add	r2, r3
 8003f88:	4499      	add	r9, r3
 8003f8a:	441d      	add	r5, r3
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	e7c1      	b.n	8003f14 <_dtoa_r+0x84c>
 8003f90:	4603      	mov	r3, r0
 8003f92:	e7f6      	b.n	8003f82 <_dtoa_r+0x8ba>
 8003f94:	f1b8 0f00 	cmp.w	r8, #0
 8003f98:	dc36      	bgt.n	8004008 <_dtoa_r+0x940>
 8003f9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	dd33      	ble.n	8004008 <_dtoa_r+0x940>
 8003fa0:	f8cd 8010 	str.w	r8, [sp, #16]
 8003fa4:	9b04      	ldr	r3, [sp, #16]
 8003fa6:	b963      	cbnz	r3, 8003fc2 <_dtoa_r+0x8fa>
 8003fa8:	4631      	mov	r1, r6
 8003faa:	2205      	movs	r2, #5
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7fe ffd0 	bl	8002f52 <__multadd>
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	f7ff f994 	bl	80032e4 <__mcmp>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f73f add3 	bgt.w	8003b68 <_dtoa_r+0x4a0>
 8003fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fc4:	9d06      	ldr	r5, [sp, #24]
 8003fc6:	ea6f 0a03 	mvn.w	sl, r3
 8003fca:	f04f 0900 	mov.w	r9, #0
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f7fe ffa7 	bl	8002f24 <_Bfree>
 8003fd6:	2f00      	cmp	r7, #0
 8003fd8:	f43f aebd 	beq.w	8003d56 <_dtoa_r+0x68e>
 8003fdc:	f1b9 0f00 	cmp.w	r9, #0
 8003fe0:	d005      	beq.n	8003fee <_dtoa_r+0x926>
 8003fe2:	45b9      	cmp	r9, r7
 8003fe4:	d003      	beq.n	8003fee <_dtoa_r+0x926>
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7fe ff9b 	bl	8002f24 <_Bfree>
 8003fee:	4639      	mov	r1, r7
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7fe ff97 	bl	8002f24 <_Bfree>
 8003ff6:	e6ae      	b.n	8003d56 <_dtoa_r+0x68e>
 8003ff8:	2600      	movs	r6, #0
 8003ffa:	4637      	mov	r7, r6
 8003ffc:	e7e1      	b.n	8003fc2 <_dtoa_r+0x8fa>
 8003ffe:	46ba      	mov	sl, r7
 8004000:	4637      	mov	r7, r6
 8004002:	e5b1      	b.n	8003b68 <_dtoa_r+0x4a0>
 8004004:	40240000 	.word	0x40240000
 8004008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400a:	f8cd 8010 	str.w	r8, [sp, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80f3 	beq.w	80041fa <_dtoa_r+0xb32>
 8004014:	2d00      	cmp	r5, #0
 8004016:	dd05      	ble.n	8004024 <_dtoa_r+0x95c>
 8004018:	4639      	mov	r1, r7
 800401a:	462a      	mov	r2, r5
 800401c:	4620      	mov	r0, r4
 800401e:	f7ff f90d 	bl	800323c <__lshift>
 8004022:	4607      	mov	r7, r0
 8004024:	9b08      	ldr	r3, [sp, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04c      	beq.n	80040c4 <_dtoa_r+0x9fc>
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4620      	mov	r0, r4
 800402e:	f7fe ff45 	bl	8002ebc <_Balloc>
 8004032:	4605      	mov	r5, r0
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	f107 010c 	add.w	r1, r7, #12
 800403a:	3202      	adds	r2, #2
 800403c:	0092      	lsls	r2, r2, #2
 800403e:	300c      	adds	r0, #12
 8004040:	f000 f8fe 	bl	8004240 <memcpy>
 8004044:	2201      	movs	r2, #1
 8004046:	4629      	mov	r1, r5
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff f8f7 	bl	800323c <__lshift>
 800404e:	46b9      	mov	r9, r7
 8004050:	4607      	mov	r7, r0
 8004052:	9b06      	ldr	r3, [sp, #24]
 8004054:	9307      	str	r3, [sp, #28]
 8004056:	9b02      	ldr	r3, [sp, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	9308      	str	r3, [sp, #32]
 800405e:	4631      	mov	r1, r6
 8004060:	4658      	mov	r0, fp
 8004062:	f7ff faa3 	bl	80035ac <quorem>
 8004066:	4649      	mov	r1, r9
 8004068:	4605      	mov	r5, r0
 800406a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800406e:	4658      	mov	r0, fp
 8004070:	f7ff f938 	bl	80032e4 <__mcmp>
 8004074:	463a      	mov	r2, r7
 8004076:	9002      	str	r0, [sp, #8]
 8004078:	4631      	mov	r1, r6
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff f94c 	bl	8003318 <__mdiff>
 8004080:	68c3      	ldr	r3, [r0, #12]
 8004082:	4602      	mov	r2, r0
 8004084:	bb03      	cbnz	r3, 80040c8 <_dtoa_r+0xa00>
 8004086:	4601      	mov	r1, r0
 8004088:	9009      	str	r0, [sp, #36]	; 0x24
 800408a:	4658      	mov	r0, fp
 800408c:	f7ff f92a 	bl	80032e4 <__mcmp>
 8004090:	4603      	mov	r3, r0
 8004092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004094:	4611      	mov	r1, r2
 8004096:	4620      	mov	r0, r4
 8004098:	9309      	str	r3, [sp, #36]	; 0x24
 800409a:	f7fe ff43 	bl	8002f24 <_Bfree>
 800409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a0:	b9a3      	cbnz	r3, 80040cc <_dtoa_r+0xa04>
 80040a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80040a4:	b992      	cbnz	r2, 80040cc <_dtoa_r+0xa04>
 80040a6:	9a08      	ldr	r2, [sp, #32]
 80040a8:	b982      	cbnz	r2, 80040cc <_dtoa_r+0xa04>
 80040aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80040ae:	d029      	beq.n	8004104 <_dtoa_r+0xa3c>
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	dd01      	ble.n	80040ba <_dtoa_r+0x9f2>
 80040b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80040ba:	9b07      	ldr	r3, [sp, #28]
 80040bc:	1c5d      	adds	r5, r3, #1
 80040be:	f883 8000 	strb.w	r8, [r3]
 80040c2:	e784      	b.n	8003fce <_dtoa_r+0x906>
 80040c4:	4638      	mov	r0, r7
 80040c6:	e7c2      	b.n	800404e <_dtoa_r+0x986>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e7e3      	b.n	8004094 <_dtoa_r+0x9cc>
 80040cc:	9a02      	ldr	r2, [sp, #8]
 80040ce:	2a00      	cmp	r2, #0
 80040d0:	db04      	blt.n	80040dc <_dtoa_r+0xa14>
 80040d2:	d123      	bne.n	800411c <_dtoa_r+0xa54>
 80040d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80040d6:	bb0a      	cbnz	r2, 800411c <_dtoa_r+0xa54>
 80040d8:	9a08      	ldr	r2, [sp, #32]
 80040da:	b9fa      	cbnz	r2, 800411c <_dtoa_r+0xa54>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	ddec      	ble.n	80040ba <_dtoa_r+0x9f2>
 80040e0:	4659      	mov	r1, fp
 80040e2:	2201      	movs	r2, #1
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff f8a9 	bl	800323c <__lshift>
 80040ea:	4631      	mov	r1, r6
 80040ec:	4683      	mov	fp, r0
 80040ee:	f7ff f8f9 	bl	80032e4 <__mcmp>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	dc03      	bgt.n	80040fe <_dtoa_r+0xa36>
 80040f6:	d1e0      	bne.n	80040ba <_dtoa_r+0x9f2>
 80040f8:	f018 0f01 	tst.w	r8, #1
 80040fc:	d0dd      	beq.n	80040ba <_dtoa_r+0x9f2>
 80040fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004102:	d1d8      	bne.n	80040b6 <_dtoa_r+0x9ee>
 8004104:	9b07      	ldr	r3, [sp, #28]
 8004106:	9a07      	ldr	r2, [sp, #28]
 8004108:	1c5d      	adds	r5, r3, #1
 800410a:	2339      	movs	r3, #57	; 0x39
 800410c:	7013      	strb	r3, [r2, #0]
 800410e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004112:	1e6a      	subs	r2, r5, #1
 8004114:	2b39      	cmp	r3, #57	; 0x39
 8004116:	d04d      	beq.n	80041b4 <_dtoa_r+0xaec>
 8004118:	3301      	adds	r3, #1
 800411a:	e052      	b.n	80041c2 <_dtoa_r+0xafa>
 800411c:	9a07      	ldr	r2, [sp, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f102 0501 	add.w	r5, r2, #1
 8004124:	dd06      	ble.n	8004134 <_dtoa_r+0xa6c>
 8004126:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800412a:	d0eb      	beq.n	8004104 <_dtoa_r+0xa3c>
 800412c:	f108 0801 	add.w	r8, r8, #1
 8004130:	9b07      	ldr	r3, [sp, #28]
 8004132:	e7c4      	b.n	80040be <_dtoa_r+0x9f6>
 8004134:	9b06      	ldr	r3, [sp, #24]
 8004136:	9a04      	ldr	r2, [sp, #16]
 8004138:	1aeb      	subs	r3, r5, r3
 800413a:	4293      	cmp	r3, r2
 800413c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004140:	d021      	beq.n	8004186 <_dtoa_r+0xabe>
 8004142:	4659      	mov	r1, fp
 8004144:	2300      	movs	r3, #0
 8004146:	220a      	movs	r2, #10
 8004148:	4620      	mov	r0, r4
 800414a:	f7fe ff02 	bl	8002f52 <__multadd>
 800414e:	45b9      	cmp	r9, r7
 8004150:	4683      	mov	fp, r0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 020a 	mov.w	r2, #10
 800415a:	4649      	mov	r1, r9
 800415c:	4620      	mov	r0, r4
 800415e:	d105      	bne.n	800416c <_dtoa_r+0xaa4>
 8004160:	f7fe fef7 	bl	8002f52 <__multadd>
 8004164:	4681      	mov	r9, r0
 8004166:	4607      	mov	r7, r0
 8004168:	9507      	str	r5, [sp, #28]
 800416a:	e778      	b.n	800405e <_dtoa_r+0x996>
 800416c:	f7fe fef1 	bl	8002f52 <__multadd>
 8004170:	4639      	mov	r1, r7
 8004172:	4681      	mov	r9, r0
 8004174:	2300      	movs	r3, #0
 8004176:	220a      	movs	r2, #10
 8004178:	4620      	mov	r0, r4
 800417a:	f7fe feea 	bl	8002f52 <__multadd>
 800417e:	4607      	mov	r7, r0
 8004180:	e7f2      	b.n	8004168 <_dtoa_r+0xaa0>
 8004182:	f04f 0900 	mov.w	r9, #0
 8004186:	4659      	mov	r1, fp
 8004188:	2201      	movs	r2, #1
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff f856 	bl	800323c <__lshift>
 8004190:	4631      	mov	r1, r6
 8004192:	4683      	mov	fp, r0
 8004194:	f7ff f8a6 	bl	80032e4 <__mcmp>
 8004198:	2800      	cmp	r0, #0
 800419a:	dcb8      	bgt.n	800410e <_dtoa_r+0xa46>
 800419c:	d102      	bne.n	80041a4 <_dtoa_r+0xadc>
 800419e:	f018 0f01 	tst.w	r8, #1
 80041a2:	d1b4      	bne.n	800410e <_dtoa_r+0xa46>
 80041a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041a8:	1e6a      	subs	r2, r5, #1
 80041aa:	2b30      	cmp	r3, #48	; 0x30
 80041ac:	f47f af0f 	bne.w	8003fce <_dtoa_r+0x906>
 80041b0:	4615      	mov	r5, r2
 80041b2:	e7f7      	b.n	80041a4 <_dtoa_r+0xadc>
 80041b4:	9b06      	ldr	r3, [sp, #24]
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d105      	bne.n	80041c6 <_dtoa_r+0xafe>
 80041ba:	2331      	movs	r3, #49	; 0x31
 80041bc:	9a06      	ldr	r2, [sp, #24]
 80041be:	f10a 0a01 	add.w	sl, sl, #1
 80041c2:	7013      	strb	r3, [r2, #0]
 80041c4:	e703      	b.n	8003fce <_dtoa_r+0x906>
 80041c6:	4615      	mov	r5, r2
 80041c8:	e7a1      	b.n	800410e <_dtoa_r+0xa46>
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <_dtoa_r+0xb60>)
 80041cc:	f7ff bae1 	b.w	8003792 <_dtoa_r+0xca>
 80041d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f47f aabb 	bne.w	800374e <_dtoa_r+0x86>
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <_dtoa_r+0xb64>)
 80041da:	f7ff bada 	b.w	8003792 <_dtoa_r+0xca>
 80041de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f77f ae3f 	ble.w	8003e64 <_dtoa_r+0x79c>
 80041e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	e653      	b.n	8003e94 <_dtoa_r+0x7cc>
 80041ec:	9b04      	ldr	r3, [sp, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dc03      	bgt.n	80041fa <_dtoa_r+0xb32>
 80041f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	f73f aed5 	bgt.w	8003fa4 <_dtoa_r+0x8dc>
 80041fa:	9d06      	ldr	r5, [sp, #24]
 80041fc:	4631      	mov	r1, r6
 80041fe:	4658      	mov	r0, fp
 8004200:	f7ff f9d4 	bl	80035ac <quorem>
 8004204:	9b06      	ldr	r3, [sp, #24]
 8004206:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800420a:	f805 8b01 	strb.w	r8, [r5], #1
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	1aeb      	subs	r3, r5, r3
 8004212:	429a      	cmp	r2, r3
 8004214:	ddb5      	ble.n	8004182 <_dtoa_r+0xaba>
 8004216:	4659      	mov	r1, fp
 8004218:	2300      	movs	r3, #0
 800421a:	220a      	movs	r2, #10
 800421c:	4620      	mov	r0, r4
 800421e:	f7fe fe98 	bl	8002f52 <__multadd>
 8004222:	4683      	mov	fp, r0
 8004224:	e7ea      	b.n	80041fc <_dtoa_r+0xb34>
 8004226:	bf00      	nop
 8004228:	080043b9 	.word	0x080043b9
 800422c:	080043ac 	.word	0x080043ac

08004230 <malloc>:
 8004230:	4b02      	ldr	r3, [pc, #8]	; (800423c <malloc+0xc>)
 8004232:	4601      	mov	r1, r0
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	f7ff b947 	b.w	80034c8 <_malloc_r>
 800423a:	bf00      	nop
 800423c:	2000000c 	.word	0x2000000c

08004240 <memcpy>:
 8004240:	b510      	push	{r4, lr}
 8004242:	1e43      	subs	r3, r0, #1
 8004244:	440a      	add	r2, r1
 8004246:	4291      	cmp	r1, r2
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	bd10      	pop	{r4, pc}
 800424c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004254:	e7f7      	b.n	8004246 <memcpy+0x6>

08004256 <__malloc_lock>:
 8004256:	4770      	bx	lr

08004258 <__malloc_unlock>:
 8004258:	4770      	bx	lr
	...

0800425c <_init>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr

08004268 <_fini>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr
