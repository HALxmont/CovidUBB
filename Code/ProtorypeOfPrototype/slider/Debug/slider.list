
slider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000177c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018ac  080018ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018ac  080018ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018ac  080018ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018ac  080018ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  080018c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080018c0  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006eaa  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012a1  00000000  00000000  00026edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00028180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  00028a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001300b  00000000  00000000  000292a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005da6  00000000  00000000  0003c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b40b  00000000  00000000  00042059  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002488  00000000  00000000  000ad4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001870 	.word	0x08001870

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001870 	.word	0x08001870

0800014c <delay_us>:
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);


void delay_us (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay_us+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay_us+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay_us+0x14>
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000028 	.word	0x20000028

0800017c <main>:


int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0


  HAL_Init();
 8000182:	f000 fa4d 	bl	8000620 <HAL_Init>

  SystemClock_Config();
 8000186:	f000 f883 	bl	8000290 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 800018a:	f000 f917 	bl	80003bc <MX_GPIO_Init>
  MX_TIM1_Init();
 800018e:	f000 f8c5 	bl	800031c <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000192:	483d      	ldr	r0, [pc, #244]	; (8000288 <main+0x10c>)
 8000194:	f001 f929 	bl	80013ea <HAL_TIM_Base_Start>


  //=======================================
  int16_t delay = 1120;
 8000198:	f44f 638c 	mov.w	r3, #1120	; 0x460
 800019c:	80fb      	strh	r3, [r7, #6]
  int16_t pasos = 200;
 800019e:	23c8      	movs	r3, #200	; 0xc8
 80001a0:	80bb      	strh	r3, [r7, #4]

  while (1)
  {

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// RESET DRIVER
 80001a2:	2200      	movs	r2, #0
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	4839      	ldr	r0, [pc, #228]	; (800028c <main+0x110>)
 80001a8:	f000 fcf1 	bl	8000b8e <HAL_GPIO_WritePin>

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) // PUSH BUTTON (WHITE)
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	4836      	ldr	r0, [pc, #216]	; (800028c <main+0x110>)
 80001b2:	f000 fcd5 	bl	8000b60 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d12b      	bne.n	8000214 <main+0x98>
	  	    {
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	// RESET PIN ON
 80001bc:	2201      	movs	r2, #1
 80001be:	2180      	movs	r1, #128	; 0x80
 80001c0:	4832      	ldr	r0, [pc, #200]	; (800028c <main+0x110>)
 80001c2:	f000 fce4 	bl	8000b8e <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	// DIRECTION PIN
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001cc:	482f      	ldr	r0, [pc, #188]	; (800028c <main+0x110>)
 80001ce:	f000 fcde 	bl	8000b8e <HAL_GPIO_WritePin>




	  	    	for (int i = 0; i<pasos; i++) //Equivale al numero de vueltas (200 es 360ยบ grados) o micropasos
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	e018      	b.n	800020a <main+0x8e>
	  	    	{
	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	// DIRECTION PIN
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001de:	482b      	ldr	r0, [pc, #172]	; (800028c <main+0x110>)
 80001e0:	f000 fcd5 	bl	8000b8e <HAL_GPIO_WritePin>
	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	// STEP OFF
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	4828      	ldr	r0, [pc, #160]	; (800028c <main+0x110>)
 80001ec:	f000 fccf 	bl	8000b8e <HAL_GPIO_WritePin>
		  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);	// STEP ON
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f6:	4825      	ldr	r0, [pc, #148]	; (800028c <main+0x110>)
 80001f8:	f000 fcc9 	bl	8000b8e <HAL_GPIO_WritePin>
		  	    	delay_us(delay);
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffa4 	bl	800014c <delay_us>
	  	    	for (int i = 0; i<pasos; i++) //Equivale al numero de vueltas (200 es 360ยบ grados) o micropasos
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	429a      	cmp	r2, r3
 8000212:	dbe1      	blt.n	80001d8 <main+0x5c>
	  	    	}

	  	    }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) // PUSH BUTTON (BLUE)
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	481c      	ldr	r0, [pc, #112]	; (800028c <main+0x110>)
 800021a:	f000 fca1 	bl	8000b60 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	2b01      	cmp	r3, #1
 8000222:	d12b      	bne.n	800027c <main+0x100>
	  	    {
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	// RESET PIN ON
 8000224:	2201      	movs	r2, #1
 8000226:	2180      	movs	r1, #128	; 0x80
 8000228:	4818      	ldr	r0, [pc, #96]	; (800028c <main+0x110>)
 800022a:	f000 fcb0 	bl	8000b8e <HAL_GPIO_WritePin>

	  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	// DIRECTION PIN
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000234:	4815      	ldr	r0, [pc, #84]	; (800028c <main+0x110>)
 8000236:	f000 fcaa 	bl	8000b8e <HAL_GPIO_WritePin>



	  	    	for (int i = 0; i<pasos; i++) //Equivale al numero de vueltas (200 es 360ยบ grados) o micropasos
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	e018      	b.n	8000272 <main+0xf6>
	  	    	{
	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000246:	4811      	ldr	r0, [pc, #68]	; (800028c <main+0x110>)
 8000248:	f000 fca1 	bl	8000b8e <HAL_GPIO_WritePin>
		  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	// STEP OFF
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000252:	480e      	ldr	r0, [pc, #56]	; (800028c <main+0x110>)
 8000254:	f000 fc9b 	bl	8000b8e <HAL_GPIO_WritePin>
		  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);	// STEP ON
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025e:	480b      	ldr	r0, [pc, #44]	; (800028c <main+0x110>)
 8000260:	f000 fc95 	bl	8000b8e <HAL_GPIO_WritePin>
		  	    	delay_us(delay);
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff70 	bl	800014c <delay_us>
	  	    	for (int i = 0; i<pasos; i++) //Equivale al numero de vueltas (200 es 360ยบ grados) o micropasos
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	3301      	adds	r3, #1
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	429a      	cmp	r2, r3
 800027a:	dbe1      	blt.n	8000240 <main+0xc4>

	  	    	}

	  	    }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// RESET PIN OFF
 800027c:	2200      	movs	r2, #0
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x110>)
 8000282:	f000 fc84 	bl	8000b8e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// RESET DRIVER
 8000286:	e78c      	b.n	80001a2 <main+0x26>
 8000288:	20000028 	.word	0x20000028
 800028c:	40010c00 	.word	0x40010c00

08000290 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	; 0x40
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fade 	bl	8001860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fc71 	bl	8000bc0 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e4:	f000 f8c2 	bl	800046c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fedc 	bl	80010c0 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030e:	f000 f8ad 	bl	800046c <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_TIM1_Init+0x98>)
 800033a:	4a1f      	ldr	r2, [pc, #124]	; (80003b8 <MX_TIM1_Init+0x9c>)
 800033c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000340:	2247      	movs	r2, #71	; 0x47
 8000342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_TIM1_Init+0x98>)
 800034c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_TIM1_Init+0x98>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000366:	f001 f815 	bl	8001394 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000370:	f000 f87c 	bl	800046c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_TIM1_Init+0x98>)
 8000382:	f001 f855 	bl	8001430 <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800038c:	f000 f86e 	bl	800046c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_TIM1_Init+0x98>)
 800039e:	f001 f9f7 	bl	8001790 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003a8:	f000 f860 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a23      	ldr	r2, [pc, #140]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0xa8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0xa8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <MX_GPIO_Init+0xa8>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0xa8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800041e:	4812      	ldr	r0, [pc, #72]	; (8000468 <MX_GPIO_Init+0xac>)
 8000420:	f000 fbb5 	bl	8000b8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000424:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800042e:	2302      	movs	r3, #2
 8000430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <MX_GPIO_Init+0xac>)
 800043a:	f000 fa37 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800043e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_GPIO_Init+0xac>)
 8000458:	f000 fa28 	bl	80008ac <HAL_GPIO_Init>

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	40010c00 	.word	0x40010c00

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_MspInit+0x5c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x5c>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x60>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x60>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <HAL_TIM_Base_MspInit+0x34>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d10b      	bne.n	8000506 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40012c00 	.word	0x40012c00
 8000514:	40021000 	.word	0x40021000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <HardFault_Handler+0x4>

0800052a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <MemManage_Handler+0x4>

08000530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <BusFault_Handler+0x4>

08000536 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <UsageFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000564:	f000 f8a2 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <SystemInit+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <SystemInit+0x5c>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <SystemInit+0x5c>)
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	4911      	ldr	r1, [pc, #68]	; (80005c8 <SystemInit+0x5c>)
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <SystemInit+0x60>)
 8000584:	4013      	ands	r3, r2
 8000586:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <SystemInit+0x5c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <SystemInit+0x5c>)
 800058e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <SystemInit+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <SystemInit+0x5c>)
 800059e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <SystemInit+0x5c>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <SystemInit+0x5c>)
 80005aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <SystemInit+0x5c>)
 80005b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SystemInit+0x64>)
 80005ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005be:	609a      	str	r2, [r3, #8]
#endif 
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	f8ff0000 	.word	0xf8ff0000
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005f0:	f842 3b04 	str.w	r3, [r2], #4

080005f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fa:	f7ff ffb7 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f001 f90b 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fdbb 	bl	800017c <main>
  bx lr
 8000606:	4770      	bx	lr
  ldr r3, =_sidata
 8000608:	080018b4 	.word	0x080018b4
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000610:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000614:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000618:	2000006c 	.word	0x2000006c

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_Init+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_Init+0x28>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f907 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f808 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff ff1c 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x54>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x58>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	fbb3 f3f1 	udiv	r3, r3, r1
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f911 	bl	8000892 <HAL_SYSTICK_Config>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e00e      	b.n	8000698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b0f      	cmp	r3, #15
 800067e:	d80a      	bhi.n	8000696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000680:	2200      	movs	r2, #0
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000688:	f000 f8e7 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_InitTick+0x5c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x1c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x20>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <HAL_IncTick+0x20>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000068 	.word	0x20000068

080006d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <HAL_GetTick+0x10>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	20000068 	.word	0x20000068

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000824:	f7ff ff90 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff49 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5e 	bl	800072c <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff90 	bl	800079c <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5f 	bl	8000748 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008be:	e127      	b.n	8000b10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008c0:	2201      	movs	r2, #1
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 8116 	bne.w	8000b0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d034      	beq.n	8000950 <HAL_GPIO_Init+0xa4>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d80d      	bhi.n	8000906 <HAL_GPIO_Init+0x5a>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d02b      	beq.n	8000946 <HAL_GPIO_Init+0x9a>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d804      	bhi.n	80008fc <HAL_GPIO_Init+0x50>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d031      	beq.n	800095a <HAL_GPIO_Init+0xae>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d01c      	beq.n	8000934 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fa:	e048      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d043      	beq.n	8000988 <HAL_GPIO_Init+0xdc>
 8000900:	2b11      	cmp	r3, #17
 8000902:	d01b      	beq.n	800093c <HAL_GPIO_Init+0x90>
          break;
 8000904:	e043      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000906:	4a89      	ldr	r2, [pc, #548]	; (8000b2c <HAL_GPIO_Init+0x280>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d026      	beq.n	800095a <HAL_GPIO_Init+0xae>
 800090c:	4a87      	ldr	r2, [pc, #540]	; (8000b2c <HAL_GPIO_Init+0x280>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d806      	bhi.n	8000920 <HAL_GPIO_Init+0x74>
 8000912:	4a87      	ldr	r2, [pc, #540]	; (8000b30 <HAL_GPIO_Init+0x284>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d020      	beq.n	800095a <HAL_GPIO_Init+0xae>
 8000918:	4a86      	ldr	r2, [pc, #536]	; (8000b34 <HAL_GPIO_Init+0x288>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01d      	beq.n	800095a <HAL_GPIO_Init+0xae>
          break;
 800091e:	e036      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000920:	4a85      	ldr	r2, [pc, #532]	; (8000b38 <HAL_GPIO_Init+0x28c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d019      	beq.n	800095a <HAL_GPIO_Init+0xae>
 8000926:	4a85      	ldr	r2, [pc, #532]	; (8000b3c <HAL_GPIO_Init+0x290>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d016      	beq.n	800095a <HAL_GPIO_Init+0xae>
 800092c:	4a84      	ldr	r2, [pc, #528]	; (8000b40 <HAL_GPIO_Init+0x294>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0xae>
          break;
 8000932:	e02c      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e028      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e023      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3308      	adds	r3, #8
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e01e      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	330c      	adds	r3, #12
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e019      	b.n	800098e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000962:	2304      	movs	r3, #4
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e012      	b.n	800098e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	611a      	str	r2, [r3, #16]
          break;
 800097a:	e008      	b.n	800098e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	615a      	str	r2, [r3, #20]
          break;
 8000986:	e002      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d801      	bhi.n	8000998 <HAL_GPIO_Init+0xec>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	e001      	b.n	800099c <HAL_GPIO_Init+0xf0>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3304      	adds	r3, #4
 800099c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d802      	bhi.n	80009aa <HAL_GPIO_Init+0xfe>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	e002      	b.n	80009b0 <HAL_GPIO_Init+0x104>
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	3b08      	subs	r3, #8
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	210f      	movs	r1, #15
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	6a39      	ldr	r1, [r7, #32]
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	431a      	orrs	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 8096 	beq.w	8000b0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009de:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a58      	ldr	r2, [pc, #352]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6193      	str	r3, [r2, #24]
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f6:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <HAL_GPIO_Init+0x29c>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0x19e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x2a4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <HAL_GPIO_Init+0x19a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a49      	ldr	r2, [pc, #292]	; (8000b54 <HAL_GPIO_Init+0x2a8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x196>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a48      	ldr	r2, [pc, #288]	; (8000b58 <HAL_GPIO_Init+0x2ac>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_GPIO_Init+0x192>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5c:	493a      	ldr	r1, [pc, #232]	; (8000b48 <HAL_GPIO_Init+0x29c>)
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4938      	ldr	r1, [pc, #224]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
 8000a82:	e006      	b.n	8000a92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	4933      	ldr	r1, [pc, #204]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	492e      	ldr	r1, [pc, #184]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	4929      	ldr	r1, [pc, #164]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	4924      	ldr	r1, [pc, #144]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	608b      	str	r3, [r1, #8]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	491f      	ldr	r1, [pc, #124]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	491a      	ldr	r1, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4915      	ldr	r1, [pc, #84]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f aed0 	bne.w	80008c0 <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	372c      	adds	r7, #44	; 0x2c
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10110000 	.word	0x10110000
 8000b34:	10120000 	.word	0x10120000
 8000b38:	10310000 	.word	0x10310000
 8000b3c:	10320000 	.word	0x10320000
 8000b40:	10220000 	.word	0x10220000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e001      	b.n	8000b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9e:	787b      	ldrb	r3, [r7, #1]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba4:	887a      	ldrh	r2, [r7, #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000baa:	e003      	b.n	8000bb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	041a      	lsls	r2, r3, #16
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e26c      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8087 	beq.w	8000cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be0:	4b92      	ldr	r3, [pc, #584]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d00c      	beq.n	8000c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bec:	4b8f      	ldr	r3, [pc, #572]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d112      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d10b      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c06:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d06c      	beq.n	8000cec <HAL_RCC_OscConfig+0x12c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d168      	bne.n	8000cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e246      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c26:	d106      	bne.n	8000c36 <HAL_RCC_OscConfig+0x76>
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a7f      	ldr	r2, [pc, #508]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e02e      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0x98>
 8000c3e:	4b7b      	ldr	r3, [pc, #492]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b78      	ldr	r3, [pc, #480]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a77      	ldr	r2, [pc, #476]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0xbc>
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a71      	ldr	r2, [pc, #452]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a6e      	ldr	r2, [pc, #440]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a67      	ldr	r2, [pc, #412]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fd18 	bl	80006d0 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fd14 	bl	80006d0 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1fa      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xe4>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fd04 	bl	80006d0 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fd00 	bl	80006d0 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1e6      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x10c>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1ba      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fcb9 	bl	80006d0 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fcb5 	bl	80006d0 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e19b      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4927      	ldr	r1, [pc, #156]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc98 	bl	80006d0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc94 	bl	80006d0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e17a      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d03a      	beq.n	8000e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d019      	beq.n	8000e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc78 	bl	80006d0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc74 	bl	80006d0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e15a      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 faa8 	bl	8001358 <RCC_Delay>
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc5e 	bl	80006d0 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	e00f      	b.n	8000e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc5a 	bl	80006d0 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d908      	bls.n	8000e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e140      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	42420000 	.word	0x42420000
 8000e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	4b9e      	ldr	r3, [pc, #632]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e9      	bne.n	8000e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a6 	beq.w	8000f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b97      	ldr	r3, [pc, #604]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b94      	ldr	r3, [pc, #592]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a93      	ldr	r2, [pc, #588]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b91      	ldr	r3, [pc, #580]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7e:	4b8e      	ldr	r3, [pc, #568]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a8a      	ldr	r2, [pc, #552]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fc1b 	bl	80006d0 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9e:	f7ff fc17 	bl	80006d0 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e0fd      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x312>
 8000ec4:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a7a      	ldr	r2, [pc, #488]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x334>
 8000eda:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a75      	ldr	r2, [pc, #468]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b73      	ldr	r3, [pc, #460]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a72      	ldr	r2, [pc, #456]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	e01c      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d10c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x356>
 8000efc:	4b6d      	ldr	r3, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a6c      	ldr	r2, [pc, #432]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a69      	ldr	r2, [pc, #420]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000f16:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a66      	ldr	r2, [pc, #408]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fbcb 	bl	80006d0 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fbc7 	bl	80006d0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e0ab      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0ee      	beq.n	8000f3e <HAL_RCC_OscConfig+0x37e>
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fbb5 	bl	80006d0 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fbb1 	bl	80006d0 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e095      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8081 	beq.w	80010aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d061      	beq.n	8001078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d146      	bne.n	800104a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb85 	bl	80006d0 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb81 	bl	80006d0 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e067      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff0:	d108      	bne.n	8001004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	492d      	ldr	r1, [pc, #180]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a19      	ldr	r1, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	430b      	orrs	r3, r1
 8001016:	4927      	ldr	r1, [pc, #156]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fb55 	bl	80006d0 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fb51 	bl	80006d0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e037      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x46a>
 8001048:	e02f      	b.n	80010aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fb3e 	bl	80006d0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fb3a 	bl	80006d0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e020      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x498>
 8001076:	e018      	b.n	80010aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e013      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	429a      	cmp	r2, r3
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40007000 	.word	0x40007000
 80010bc:	42420060 	.word	0x42420060

080010c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d0      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d910      	bls.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 0207 	bic.w	r2, r3, #7
 80010ea:	4965      	ldr	r1, [pc, #404]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0b8      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800111c:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	494d      	ldr	r1, [pc, #308]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d040      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d115      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e07f      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e073      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06b      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f023 0203 	bic.w	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4936      	ldr	r1, [pc, #216]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fa8e 	bl	80006d0 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b8:	f7ff fa8a 	bl	80006d0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e053      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 020c 	and.w	r2, r3, #12
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d1eb      	bne.n	80011b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d210      	bcs.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4922      	ldr	r1, [pc, #136]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e032      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4916      	ldr	r1, [pc, #88]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124e:	f000 f821 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 8001252:	4601      	mov	r1, r0
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_RCC_ClockConfig+0x1c8>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	fa21 f303 	lsr.w	r3, r1, r3
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1cc>)
 8001268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1d0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f9ec 	bl	800064c <HAL_InitTick>

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000
 8001284:	40021000 	.word	0x40021000
 8001288:	0800189c 	.word	0x0800189c
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	b490      	push	{r4, r7}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800129c:	1d3c      	adds	r4, r7, #4
 800129e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d002      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0x40>
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d003      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x46>
 80012d2:	e02d      	b.n	8001330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012d6:	623b      	str	r3, [r7, #32]
      break;
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012e6:	4413      	add	r3, r2
 80012e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0c5b      	lsrs	r3, r3, #17
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001306:	4413      	add	r3, r2
 8001308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800130c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	e004      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	623b      	str	r3, [r7, #32]
      break;
 800132e:	e002      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001332:	623b      	str	r3, [r7, #32]
      break;
 8001334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001336:	6a3b      	ldr	r3, [r7, #32]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bc90      	pop	{r4, r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	08001888 	.word	0x08001888
 8001348:	08001898 	.word	0x08001898
 800134c:	40021000 	.word	0x40021000
 8001350:	007a1200 	.word	0x007a1200
 8001354:	003d0900 	.word	0x003d0900

08001358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <RCC_Delay+0x34>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <RCC_Delay+0x38>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0a5b      	lsrs	r3, r3, #9
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001374:	bf00      	nop
  }
  while (Delay --);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	60fa      	str	r2, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <RCC_Delay+0x1c>
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000000 	.word	0x20000000
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e01d      	b.n	80013e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f88e 	bl	80004dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3304      	adds	r3, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f000 f8e4 	bl	80015a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b06      	cmp	r3, #6
 800140a:	d007      	beq.n	800141c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_TIM_ConfigClockSource+0x18>
 8001444:	2302      	movs	r3, #2
 8001446:	e0a6      	b.n	8001596 <HAL_TIM_ConfigClockSource+0x166>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800146e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b40      	cmp	r3, #64	; 0x40
 800147e:	d067      	beq.n	8001550 <HAL_TIM_ConfigClockSource+0x120>
 8001480:	2b40      	cmp	r3, #64	; 0x40
 8001482:	d80b      	bhi.n	800149c <HAL_TIM_ConfigClockSource+0x6c>
 8001484:	2b10      	cmp	r3, #16
 8001486:	d073      	beq.n	8001570 <HAL_TIM_ConfigClockSource+0x140>
 8001488:	2b10      	cmp	r3, #16
 800148a:	d802      	bhi.n	8001492 <HAL_TIM_ConfigClockSource+0x62>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d06f      	beq.n	8001570 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001490:	e078      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001492:	2b20      	cmp	r3, #32
 8001494:	d06c      	beq.n	8001570 <HAL_TIM_ConfigClockSource+0x140>
 8001496:	2b30      	cmp	r3, #48	; 0x30
 8001498:	d06a      	beq.n	8001570 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800149a:	e073      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800149c:	2b70      	cmp	r3, #112	; 0x70
 800149e:	d00d      	beq.n	80014bc <HAL_TIM_ConfigClockSource+0x8c>
 80014a0:	2b70      	cmp	r3, #112	; 0x70
 80014a2:	d804      	bhi.n	80014ae <HAL_TIM_ConfigClockSource+0x7e>
 80014a4:	2b50      	cmp	r3, #80	; 0x50
 80014a6:	d033      	beq.n	8001510 <HAL_TIM_ConfigClockSource+0xe0>
 80014a8:	2b60      	cmp	r3, #96	; 0x60
 80014aa:	d041      	beq.n	8001530 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80014ac:	e06a      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80014ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b2:	d066      	beq.n	8001582 <HAL_TIM_ConfigClockSource+0x152>
 80014b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b8:	d017      	beq.n	80014ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80014ba:	e063      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6899      	ldr	r1, [r3, #8]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f000 f941 	bl	8001752 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]
      break;
 80014e8:	e04c      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f000 f92a 	bl	8001752 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800150c:	609a      	str	r2, [r3, #8]
      break;
 800150e:	e039      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	461a      	mov	r2, r3
 800151e:	f000 f8a1 	bl	8001664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2150      	movs	r1, #80	; 0x50
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f8f8 	bl	800171e <TIM_ITRx_SetConfig>
      break;
 800152e:	e029      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	461a      	mov	r2, r3
 800153e:	f000 f8bf 	bl	80016c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2160      	movs	r1, #96	; 0x60
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8e8 	bl	800171e <TIM_ITRx_SetConfig>
      break;
 800154e:	e019      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	461a      	mov	r2, r3
 800155e:	f000 f881 	bl	8001664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f8d8 	bl	800171e <TIM_ITRx_SetConfig>
      break;
 800156e:	e009      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4610      	mov	r0, r2
 800157c:	f000 f8cf 	bl	800171e <TIM_ITRx_SetConfig>
      break;
 8001580:	e000      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <TIM_Base_SetConfig+0xb8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00b      	beq.n	80015d0 <TIM_Base_SetConfig+0x30>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015be:	d007      	beq.n	80015d0 <TIM_Base_SetConfig+0x30>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a26      	ldr	r2, [pc, #152]	; (800165c <TIM_Base_SetConfig+0xbc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d003      	beq.n	80015d0 <TIM_Base_SetConfig+0x30>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a25      	ldr	r2, [pc, #148]	; (8001660 <TIM_Base_SetConfig+0xc0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <TIM_Base_SetConfig+0xb8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00b      	beq.n	8001602 <TIM_Base_SetConfig+0x62>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d007      	beq.n	8001602 <TIM_Base_SetConfig+0x62>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <TIM_Base_SetConfig+0xbc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d003      	beq.n	8001602 <TIM_Base_SetConfig+0x62>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <TIM_Base_SetConfig+0xc0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d108      	bne.n	8001614 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a07      	ldr	r2, [pc, #28]	; (8001658 <TIM_Base_SetConfig+0xb8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d103      	bne.n	8001648 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	615a      	str	r2, [r3, #20]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40000400 	.word	0x40000400
 8001660:	40000800 	.word	0x40000800

08001664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f023 0201 	bic.w	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800168e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f023 030a 	bic.w	r3, r3, #10
 80016a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	621a      	str	r2, [r3, #32]
}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f023 0210 	bic.w	r2, r3, #16
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80016ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	621a      	str	r2, [r3, #32]
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	f043 0307 	orr.w	r3, r3, #7
 8001740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001752:	b480      	push	{r7}
 8001754:	b087      	sub	sp, #28
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800176c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	021a      	lsls	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4313      	orrs	r3, r2
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e032      	b.n	800180e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	2500      	movs	r5, #0
 800181c:	4e0c      	ldr	r6, [pc, #48]	; (8001850 <__libc_init_array+0x38>)
 800181e:	4c0d      	ldr	r4, [pc, #52]	; (8001854 <__libc_init_array+0x3c>)
 8001820:	1ba4      	subs	r4, r4, r6
 8001822:	10a4      	asrs	r4, r4, #2
 8001824:	42a5      	cmp	r5, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	f000 f822 	bl	8001870 <_init>
 800182c:	2500      	movs	r5, #0
 800182e:	4e0a      	ldr	r6, [pc, #40]	; (8001858 <__libc_init_array+0x40>)
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <__libc_init_array+0x44>)
 8001832:	1ba4      	subs	r4, r4, r6
 8001834:	10a4      	asrs	r4, r4, #2
 8001836:	42a5      	cmp	r5, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001840:	4798      	blx	r3
 8001842:	3501      	adds	r5, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800184a:	4798      	blx	r3
 800184c:	3501      	adds	r5, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	080018ac 	.word	0x080018ac
 8001854:	080018ac 	.word	0x080018ac
 8001858:	080018ac 	.word	0x080018ac
 800185c:	080018b0 	.word	0x080018b0

08001860 <memset>:
 8001860:	4603      	mov	r3, r0
 8001862:	4402      	add	r2, r0
 8001864:	4293      	cmp	r3, r2
 8001866:	d100      	bne.n	800186a <memset+0xa>
 8001868:	4770      	bx	lr
 800186a:	f803 1b01 	strb.w	r1, [r3], #1
 800186e:	e7f9      	b.n	8001864 <memset+0x4>

08001870 <_init>:
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001872:	bf00      	nop
 8001874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001876:	bc08      	pop	{r3}
 8001878:	469e      	mov	lr, r3
 800187a:	4770      	bx	lr

0800187c <_fini>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	bf00      	nop
 8001880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001882:	bc08      	pop	{r3}
 8001884:	469e      	mov	lr, r3
 8001886:	4770      	bx	lr
